{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://192.168.0.18:3000/' // Asegúrate de que la dirección IP sea correcta\n\n}); // Request interceptor\n\napi.interceptors.request.use(config => {\n  // Puedes eliminar este bloque si no necesitas autenticación\n  // const user = AuthService.getCurrentUser();\n  // if (user != null && user.token != null) {\n  //   config.headers.Authorization = `Bearer ${user.token}`;\n  // }\n  return config;\n}, err => {\n  return Promise.reject(err);\n}); // Response interceptor\n\napi.interceptors.response.use(response => {\n  // Puedes ajustar o eliminar la lógica de respuesta según sea necesario\n  return response;\n}, err => {\n  if (err.response) {\n    if (err.response.status === 401) {// Manejo de errores de autenticación, si es necesario\n    } else if (err.response.status === 405 || err.response.status === 500) {// Manejo de otros errores\n    }\n  } else {// Manejo de errores de conexión\n  }\n\n  return Promise.reject(err);\n});\nexport { api };","map":{"version":3,"sources":["C:/Users/JELOSKA ISABEL/Documents/wild-souls/Wild-Souls/src/config/site.config.js"],"names":["axios","api","create","baseURL","interceptors","request","use","config","err","Promise","reject","response","status"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAa;AACvBC,EAAAA,OAAO,EAAE,2BADc,CACe;;AADf,CAAb,CAAZ,C,CAIA;;AACAF,GAAG,CAACG,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CACGC,MAAD,IAAY;AACV;AACA;AACA;AACA;AACA;AACA,SAAOA,MAAP;AACD,CARH,EASGC,GAAD,IAAS;AACP,SAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACD,CAXH,E,CAcA;;AACAP,GAAG,CAACG,YAAJ,CAAiBO,QAAjB,CAA0BL,GAA1B,CACGK,QAAD,IAAc;AACZ;AACA,SAAOA,QAAP;AACD,CAJH,EAKGH,GAAD,IAAS;AACP,MAAIA,GAAG,CAACG,QAAR,EAAkB;AAChB,QAAIH,GAAG,CAACG,QAAJ,CAAaC,MAAb,KAAwB,GAA5B,EAAiC,CAC/B;AACD,KAFD,MAEO,IAAIJ,GAAG,CAACG,QAAJ,CAAaC,MAAb,KAAwB,GAAxB,IAA+BJ,GAAG,CAACG,QAAJ,CAAaC,MAAb,KAAwB,GAA3D,EAAgE,CACrE;AACD;AACF,GAND,MAMO,CACL;AACD;;AACD,SAAOH,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACD,CAhBH;AAmBA,SAASP,GAAT","sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://192.168.0.18:3000/', // Asegúrate de que la dirección IP sea correcta\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Puedes eliminar este bloque si no necesitas autenticación\r\n    // const user = AuthService.getCurrentUser();\r\n    // if (user != null && user.token != null) {\r\n    //   config.headers.Authorization = `Bearer ${user.token}`;\r\n    // }\r\n    return config;\r\n  },\r\n  (err) => {\r\n    return Promise.reject(err);\r\n  },\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    // Puedes ajustar o eliminar la lógica de respuesta según sea necesario\r\n    return response;\r\n  },\r\n  (err) => {\r\n    if (err.response) {\r\n      if (err.response.status === 401) {\r\n        // Manejo de errores de autenticación, si es necesario\r\n      } else if (err.response.status === 405 || err.response.status === 500) {\r\n        // Manejo de otros errores\r\n      }\r\n    } else {\r\n      // Manejo de errores de conexión\r\n    }\r\n    return Promise.reject(err);\r\n  },\r\n);\r\n\r\nexport { api };\r\n"]},"metadata":{},"sourceType":"module"}