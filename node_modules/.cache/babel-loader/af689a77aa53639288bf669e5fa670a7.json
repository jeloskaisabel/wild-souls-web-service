{"ast":null,"code":"import AuthService from '../services/auth.service';\nimport { storageGet } from '@/services/storage';\nconst user = storageGet('user');\nconst initialState = user ? {\n  status: {\n    loggedIn: true\n  },\n  user\n} : {\n  status: {\n    loggedIn: false\n  },\n  user: null\n};\nexport const auth = {\n  namespaced: true,\n  state: initialState,\n  actions: {\n    login({\n      commit\n    }, user) {\n      return AuthService.login(user).then(response => {\n        if (response.success) {\n          commit('loginSuccess', response);\n          return Promise.resolve(response);\n        } else {\n          commit('loginFailure');\n          return Promise.reject(response.error);\n        }\n      }, error => {\n        commit('loginFailure');\n        return Promise.reject(error);\n      });\n    },\n\n    logout({\n      commit\n    }) {\n      AuthService.logout();\n      commit('logout');\n    },\n\n    register({\n      commit\n    }, user) {\n      return AuthService.register(user).then(response => {\n        commit('registerSuccess');\n        return Promise.resolve(response.data);\n      }, error => {\n        commit('registerFailure');\n        return Promise.reject(error);\n      });\n    }\n\n  },\n  mutations: {\n    loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n\n    loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n\n    logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n\n    registerSuccess(state) {\n      state.status.loggedIn = false;\n    },\n\n    registerFailure(state) {\n      state.status.loggedIn = false;\n    }\n\n  }\n};","map":{"version":3,"sources":["C:/Users/JELOSKA ISABEL/Documents/wild-souls/Wild-Souls/src/store/auth.module.js"],"names":["AuthService","storageGet","user","initialState","status","loggedIn","auth","namespaced","state","actions","login","commit","then","response","success","Promise","resolve","reject","error","logout","register","data","mutations","loginSuccess","loginFailure","registerSuccess","registerFailure"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,0BAAxB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,MAAMC,IAAI,GAAGD,UAAU,CAAC,MAAD,CAAvB;AACA,MAAME,YAAY,GAAGD,IAAI,GACrB;AAAEE,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAV;AAA8BH,EAAAA;AAA9B,CADqB,GAErB;AAAEE,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAV;AAA+BH,EAAAA,IAAI,EAAE;AAArC,CAFJ;AAIA,OAAO,MAAMI,IAAI,GAAG;AAClBC,EAAAA,UAAU,EAAE,IADM;AAElBC,EAAAA,KAAK,EAAEL,YAFW;AAGlBM,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,CAAC;AAAEC,MAAAA;AAAF,KAAD,EAAaT,IAAb,EAAmB;AACtB,aAAOF,WAAW,CAACU,KAAZ,CAAkBR,IAAlB,EAAwBU,IAAxB,CACJC,QAAD,IAAc;AACZ,YAAIA,QAAQ,CAACC,OAAb,EAAsB;AACpBH,UAAAA,MAAM,CAAC,cAAD,EAAiBE,QAAjB,CAAN;AACA,iBAAOE,OAAO,CAACC,OAAR,CAAgBH,QAAhB,CAAP;AACD,SAHD,MAGO;AACLF,UAAAA,MAAM,CAAC,cAAD,CAAN;AACA,iBAAOI,OAAO,CAACE,MAAR,CAAeJ,QAAQ,CAACK,KAAxB,CAAP;AACD;AACF,OATI,EAUJA,KAAD,IAAW;AACTP,QAAAA,MAAM,CAAC,cAAD,CAAN;AACA,eAAOI,OAAO,CAACE,MAAR,CAAeC,KAAf,CAAP;AACD,OAbI,CAAP;AAeD,KAjBM;;AAkBPC,IAAAA,MAAM,CAAC;AAAER,MAAAA;AAAF,KAAD,EAAa;AACjBX,MAAAA,WAAW,CAACmB,MAAZ;AACAR,MAAAA,MAAM,CAAC,QAAD,CAAN;AACD,KArBM;;AAsBPS,IAAAA,QAAQ,CAAC;AAAET,MAAAA;AAAF,KAAD,EAAaT,IAAb,EAAmB;AACzB,aAAOF,WAAW,CAACoB,QAAZ,CAAqBlB,IAArB,EAA2BU,IAA3B,CACJC,QAAD,IAAc;AACZF,QAAAA,MAAM,CAAC,iBAAD,CAAN;AACA,eAAOI,OAAO,CAACC,OAAR,CAAgBH,QAAQ,CAACQ,IAAzB,CAAP;AACD,OAJI,EAKJH,KAAD,IAAW;AACTP,QAAAA,MAAM,CAAC,iBAAD,CAAN;AACA,eAAOI,OAAO,CAACE,MAAR,CAAeC,KAAf,CAAP;AACD,OARI,CAAP;AAUD;;AAjCM,GAHS;AAsClBI,EAAAA,SAAS,EAAE;AACTC,IAAAA,YAAY,CAACf,KAAD,EAAQN,IAAR,EAAc;AACxBM,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,IAAxB;AACAG,MAAAA,KAAK,CAACN,IAAN,GAAaA,IAAb;AACD,KAJQ;;AAKTsB,IAAAA,YAAY,CAAChB,KAAD,EAAQ;AAClBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACAG,MAAAA,KAAK,CAACN,IAAN,GAAa,IAAb;AACD,KARQ;;AASTiB,IAAAA,MAAM,CAACX,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACAG,MAAAA,KAAK,CAACN,IAAN,GAAa,IAAb;AACD,KAZQ;;AAaTuB,IAAAA,eAAe,CAACjB,KAAD,EAAQ;AACrBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACD,KAfQ;;AAgBTqB,IAAAA,eAAe,CAAClB,KAAD,EAAQ;AACrBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACD;;AAlBQ;AAtCO,CAAb","sourcesContent":["import AuthService from '../services/auth.service';\r\nimport { storageGet } from '@/services/storage';\r\n\r\nconst user = storageGet('user');\r\nconst initialState = user\r\n  ? { status: { loggedIn: true }, user }\r\n  : { status: { loggedIn: false }, user: null };\r\n\r\nexport const auth = {\r\n  namespaced: true,\r\n  state: initialState,\r\n  actions: {\r\n    login({ commit }, user) {\r\n      return AuthService.login(user).then(\r\n        (response) => {\r\n          if (response.success) {\r\n            commit('loginSuccess', response);\r\n            return Promise.resolve(response);\r\n          } else {\r\n            commit('loginFailure');\r\n            return Promise.reject(response.error);\r\n          }\r\n        },\r\n        (error) => {\r\n          commit('loginFailure');\r\n          return Promise.reject(error);\r\n        },\r\n      );\r\n    },\r\n    logout({ commit }) {\r\n      AuthService.logout();\r\n      commit('logout');\r\n    },\r\n    register({ commit }, user) {\r\n      return AuthService.register(user).then(\r\n        (response) => {\r\n          commit('registerSuccess');\r\n          return Promise.resolve(response.data);\r\n        },\r\n        (error) => {\r\n          commit('registerFailure');\r\n          return Promise.reject(error);\r\n        },\r\n      );\r\n    },\r\n  },\r\n  mutations: {\r\n    loginSuccess(state, user) {\r\n      state.status.loggedIn = true;\r\n      state.user = user;\r\n    },\r\n    loginFailure(state) {\r\n      state.status.loggedIn = false;\r\n      state.user = null;\r\n    },\r\n    logout(state) {\r\n      state.status.loggedIn = false;\r\n      state.user = null;\r\n    },\r\n    registerSuccess(state) {\r\n      state.status.loggedIn = false;\r\n    },\r\n    registerFailure(state) {\r\n      state.status.loggedIn = false;\r\n    },\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}