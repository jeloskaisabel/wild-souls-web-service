{"ast":null,"code":"/**\n  * vee-validate v4.5.7\n  * (c) 2021 Abdelrahman Awad\n  * @license MIT\n  */\nfunction isIndex(value) {\n  return Number(value) >= 0;\n}\n/**\r\n * Transforms a Zod's base type schema to yup's base type schema\r\n */\n\n\nfunction toFieldValidator(zodSchema) {\n  return {\n    async validate(value) {\n      const result = await zodSchema.safeParseAsync(value);\n\n      if (result.success) {\n        return true;\n      }\n\n      const error = new Error(result.error.message);\n      error.name = 'ValidationError';\n      error.errors = result.error.formErrors.formErrors;\n      throw error;\n    }\n\n  };\n}\n/**\r\n * Transforms a Zod object schema to Yup's schema\r\n */\n\n\nfunction toFormValidator(zodSchema) {\n  return {\n    async validate(value) {\n      const result = await zodSchema.safeParseAsync(value);\n\n      if (result.success) {\n        return true;\n      }\n\n      const errors = result.error.issues.map(issue => {\n        return {\n          path: joinPath(issue.path),\n          errors: [issue.message]\n        };\n      });\n      const error = new Error(result.error.message);\n      error.name = 'ValidationError';\n      error.inner = errors;\n      throw error;\n    }\n\n  };\n}\n/**\r\n * Constructs a path with brackets to be compatible with vee-validate path syntax\r\n */\n\n\nfunction joinPath(path) {\n  let fullPath = String(path[0]);\n\n  for (let i = 1; i < path.length; i++) {\n    if (isIndex(path[i])) {\n      fullPath += `[${path[i]}]`;\n      continue;\n    }\n\n    fullPath += `.${path[i]}`;\n  }\n\n  return fullPath;\n}\n\nexport { toFieldValidator, toFormValidator };","map":{"version":3,"sources":["C:/Users/JELOSKA ISABEL/Documents/wild-souls/Wild-Souls/node_modules/@vee-validate/zod/dist/vee-validate-zod.esm.js"],"names":["isIndex","value","Number","toFieldValidator","zodSchema","validate","result","safeParseAsync","success","error","Error","message","name","errors","formErrors","toFormValidator","issues","map","issue","path","joinPath","inner","fullPath","String","i","length"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,SAAOC,MAAM,CAACD,KAAD,CAAN,IAAiB,CAAxB;AACH;AAED;AACA;AACA;;;AACA,SAASE,gBAAT,CAA0BC,SAA1B,EAAqC;AACjC,SAAO;AACH,UAAMC,QAAN,CAAeJ,KAAf,EAAsB;AAClB,YAAMK,MAAM,GAAG,MAAMF,SAAS,CAACG,cAAV,CAAyBN,KAAzB,CAArB;;AACA,UAAIK,MAAM,CAACE,OAAX,EAAoB;AAChB,eAAO,IAAP;AACH;;AACD,YAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,MAAM,CAACG,KAAP,CAAaE,OAAvB,CAAd;AACAF,MAAAA,KAAK,CAACG,IAAN,GAAa,iBAAb;AACAH,MAAAA,KAAK,CAACI,MAAN,GAAeP,MAAM,CAACG,KAAP,CAAaK,UAAb,CAAwBA,UAAvC;AACA,YAAML,KAAN;AACH;;AAVE,GAAP;AAYH;AACD;AACA;AACA;;;AACA,SAASM,eAAT,CAAyBX,SAAzB,EAAoC;AAChC,SAAO;AACH,UAAMC,QAAN,CAAeJ,KAAf,EAAsB;AAClB,YAAMK,MAAM,GAAG,MAAMF,SAAS,CAACG,cAAV,CAAyBN,KAAzB,CAArB;;AACA,UAAIK,MAAM,CAACE,OAAX,EAAoB;AAChB,eAAO,IAAP;AACH;;AACD,YAAMK,MAAM,GAAGP,MAAM,CAACG,KAAP,CAAaO,MAAb,CAAoBC,GAApB,CAAwBC,KAAK,IAAI;AAC5C,eAAO;AAAEC,UAAAA,IAAI,EAAEC,QAAQ,CAACF,KAAK,CAACC,IAAP,CAAhB;AAA8BN,UAAAA,MAAM,EAAE,CAACK,KAAK,CAACP,OAAP;AAAtC,SAAP;AACH,OAFc,CAAf;AAGA,YAAMF,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,MAAM,CAACG,KAAP,CAAaE,OAAvB,CAAd;AACAF,MAAAA,KAAK,CAACG,IAAN,GAAa,iBAAb;AACAH,MAAAA,KAAK,CAACY,KAAN,GAAcR,MAAd;AACA,YAAMJ,KAAN;AACH;;AAbE,GAAP;AAeH;AACD;AACA;AACA;;;AACA,SAASW,QAAT,CAAkBD,IAAlB,EAAwB;AACpB,MAAIG,QAAQ,GAAGC,MAAM,CAACJ,IAAI,CAAC,CAAD,CAAL,CAArB;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,QAAIxB,OAAO,CAACmB,IAAI,CAACK,CAAD,CAAL,CAAX,EAAsB;AAClBF,MAAAA,QAAQ,IAAK,IAAGH,IAAI,CAACK,CAAD,CAAI,GAAxB;AACA;AACH;;AACDF,IAAAA,QAAQ,IAAK,IAAGH,IAAI,CAACK,CAAD,CAAI,EAAxB;AACH;;AACD,SAAOF,QAAP;AACH;;AAED,SAASnB,gBAAT,EAA2BY,eAA3B","sourcesContent":["/**\n  * vee-validate v4.5.7\n  * (c) 2021 Abdelrahman Awad\n  * @license MIT\n  */\nfunction isIndex(value) {\r\n    return Number(value) >= 0;\r\n}\n\n/**\r\n * Transforms a Zod's base type schema to yup's base type schema\r\n */\r\nfunction toFieldValidator(zodSchema) {\r\n    return {\r\n        async validate(value) {\r\n            const result = await zodSchema.safeParseAsync(value);\r\n            if (result.success) {\r\n                return true;\r\n            }\r\n            const error = new Error(result.error.message);\r\n            error.name = 'ValidationError';\r\n            error.errors = result.error.formErrors.formErrors;\r\n            throw error;\r\n        },\r\n    };\r\n}\r\n/**\r\n * Transforms a Zod object schema to Yup's schema\r\n */\r\nfunction toFormValidator(zodSchema) {\r\n    return {\r\n        async validate(value) {\r\n            const result = await zodSchema.safeParseAsync(value);\r\n            if (result.success) {\r\n                return true;\r\n            }\r\n            const errors = result.error.issues.map(issue => {\r\n                return { path: joinPath(issue.path), errors: [issue.message] };\r\n            });\r\n            const error = new Error(result.error.message);\r\n            error.name = 'ValidationError';\r\n            error.inner = errors;\r\n            throw error;\r\n        },\r\n    };\r\n}\r\n/**\r\n * Constructs a path with brackets to be compatible with vee-validate path syntax\r\n */\r\nfunction joinPath(path) {\r\n    let fullPath = String(path[0]);\r\n    for (let i = 1; i < path.length; i++) {\r\n        if (isIndex(path[i])) {\r\n            fullPath += `[${path[i]}]`;\r\n            continue;\r\n        }\r\n        fullPath += `.${path[i]}`;\r\n    }\r\n    return fullPath;\r\n}\n\nexport { toFieldValidator, toFormValidator };\n"]},"metadata":{},"sourceType":"module"}