{"ast":null,"code":"/**\n  * vee-validate v4.5.7\n  * (c) 2021 Abdelrahman Awad\n  * @license MIT\n  */\nimport { inject, getCurrentInstance, warn as warn$1, ref, unref, computed, reactive, watch, onUnmounted, nextTick, onMounted, provide, isRef, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw, readonly } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\n\nconst isObject = obj => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\n\nfunction isIndex(value) {\n  return Number(value) >= 0;\n}\n\nfunction toNumber(value) {\n  const n = parseFloat(value);\n  return isNaN(n) ? value : n;\n}\n\nconst RULES = {};\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\n\nfunction defineRule(id, validator) {\n  // makes sure new rules are properly formatted.\n  guardExtend(id, validator);\n  RULES[id] = validator;\n}\n/**\r\n * Gets an already defined rule\r\n */\n\n\nfunction resolveRule(id) {\n  return RULES[id];\n}\n/**\r\n * Guards from extension violations.\r\n */\n\n\nfunction guardExtend(id, validator) {\n  if (isCallable(validator)) {\n    return;\n  }\n\n  throw new Error(`Extension Error: The validator '${id}' must be a function.`);\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\nconst FieldContextKey = Symbol('vee-validate-field-instance');\nconst IS_ABSENT = Symbol('Default empty value');\n\nfunction isLocator(value) {\n  return isCallable(value) && !!value.__locatorRef;\n}\n/**\r\n * Checks if an tag name is a native HTML tag and not a Vue component\r\n */\n\n\nfunction isHTMLTag(tag) {\n  return ['input', 'textarea', 'select'].includes(tag);\n}\n/**\r\n * Checks if an input is of type file\r\n */\n\n\nfunction isFileInputNode(tag, attrs) {\n  return isHTMLTag(tag) && attrs.type === 'file';\n}\n\nfunction isYupValidator(value) {\n  return !!value && isCallable(value.validate);\n}\n\nfunction hasCheckedAttr(type) {\n  return type === 'checkbox' || type === 'radio';\n}\n\nfunction isContainerValue(value) {\n  return isObject(value) || Array.isArray(value);\n}\n/**\r\n * True if the value is an empty object or array\r\n */\n\n\nfunction isEmptyContainer(value) {\n  if (Array.isArray(value)) {\n    return value.length === 0;\n  }\n\n  return isObject(value) && Object.keys(value).length === 0;\n}\n/**\r\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\r\n */\n\n\nfunction isNotNestedPath(path) {\n  return /^\\[.+\\]$/i.test(path);\n}\n/**\r\n * Checks if an element is a native HTML5 multi-select input element\r\n */\n\n\nfunction isNativeMultiSelect(el) {\n  return isNativeSelect(el) && el.multiple;\n}\n/**\r\n * Checks if an element is a native HTML5 select input element\r\n */\n\n\nfunction isNativeSelect(el) {\n  return el.tagName === 'SELECT';\n}\n/**\r\n * Checks if a tag name with attrs object will render a native multi-select element\r\n */\n\n\nfunction isNativeMultiSelectNode(tag, attrs) {\n  // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\n  const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\n  return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\n}\n/**\r\n * Checks if a node should have a `:value` binding or not\r\n *\r\n * These nodes should not have a value binding\r\n * For files, because they are not reactive\r\n * For multi-selects because the value binding will reset the value\r\n */\n\n\nfunction shouldHaveValueBinding(tag, attrs) {\n  return isNativeMultiSelectNode(tag, attrs) || isFileInputNode(tag, attrs);\n}\n\nfunction isFormSubmitEvent(evt) {\n  return isEvent(evt) && evt.target && 'submit' in evt.target;\n}\n\nfunction isEvent(evt) {\n  if (!evt) {\n    return false;\n  }\n\n  if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\n    return true;\n  } // this is for IE and Cypress #3161\n\n  /* istanbul ignore next */\n\n\n  if (evt && evt.srcElement) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isPropPresent(obj, prop) {\n  return prop in obj && obj[prop] !== IS_ABSENT;\n}\n\nfunction cleanupNonNestedPath(path) {\n  if (isNotNestedPath(path)) {\n    return path.replace(/\\[|\\]/gi, '');\n  }\n\n  return path;\n}\n\nfunction getFromPath(object, path, fallback) {\n  if (!object) {\n    return fallback;\n  }\n\n  if (isNotNestedPath(path)) {\n    return object[cleanupNonNestedPath(path)];\n  }\n\n  const resolvedValue = (path || '').split(/\\.|\\[(\\d+)\\]/).filter(Boolean).reduce((acc, propKey) => {\n    if (isContainerValue(acc) && propKey in acc) {\n      return acc[propKey];\n    }\n\n    return fallback;\n  }, object);\n  return resolvedValue;\n}\n/**\r\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\r\n */\n\n\nfunction setInPath(object, path, value) {\n  if (isNotNestedPath(path)) {\n    object[cleanupNonNestedPath(path)] = value;\n    return;\n  }\n\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, set it\n    if (i === keys.length - 1) {\n      acc[keys[i]] = value;\n      return;\n    } // Key does not exist, create a container for it\n\n\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      // container can be either an object or an array depending on the next key if it exists\n      acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\n    }\n\n    acc = acc[keys[i]];\n  }\n}\n\nfunction unset(object, key) {\n  if (Array.isArray(object) && isIndex(key)) {\n    object.splice(Number(key), 1);\n    return;\n  }\n\n  if (isObject(object)) {\n    delete object[key];\n  }\n}\n/**\r\n * Removes a nested property from object\r\n */\n\n\nfunction unsetPath(object, path) {\n  if (isNotNestedPath(path)) {\n    delete object[cleanupNonNestedPath(path)];\n    return;\n  }\n\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, unset it\n    if (i === keys.length - 1) {\n      unset(acc, keys[i]);\n      break;\n    } // Key does not exist, exit\n\n\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      break;\n    }\n\n    acc = acc[keys[i]];\n  }\n\n  const pathValues = keys.map((_, idx) => {\n    return getFromPath(object, keys.slice(0, idx).join('.'));\n  });\n\n  for (let i = pathValues.length - 1; i >= 0; i--) {\n    if (!isEmptyContainer(pathValues[i])) {\n      continue;\n    }\n\n    if (i === 0) {\n      unset(object, keys[0]);\n      continue;\n    }\n\n    unset(pathValues[i - 1], keys[i - 1]);\n  }\n}\n/**\r\n * A typed version of Object.keys\r\n */\n\n\nfunction keysOf(record) {\n  return Object.keys(record);\n} // Uses same component provide as its own injections\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\n\n\nfunction injectWithSelf(symbol, def = undefined) {\n  const vm = getCurrentInstance();\n  return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\n}\n\nfunction warn(message) {\n  warn$1(`[vee-validate]: ${message}`);\n}\n/**\r\n * Ensures we deal with a singular field value\r\n */\n\n\nfunction normalizeField(field) {\n  if (Array.isArray(field)) {\n    return field[0];\n  }\n\n  return field;\n}\n\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\n  if (Array.isArray(currentValue)) {\n    const newVal = [...currentValue];\n    const idx = newVal.indexOf(checkedValue);\n    idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\n    return newVal;\n  }\n\n  return currentValue === checkedValue ? uncheckedValue : checkedValue;\n}\n/**\r\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\r\n * (`limit`)\r\n */\n\n\nfunction throttle(func, limit) {\n  let inThrottle;\n  let lastResult;\n  return function (...args) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n\n    if (!inThrottle) {\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n      lastResult = func.apply(context, args);\n    }\n\n    return lastResult;\n  };\n}\n\nfunction debounceAsync(inner, ms = 0) {\n  let timer = null;\n  let resolves = [];\n  return function (...args) {\n    // Run the function after a certain amount of time\n    if (timer) {\n      window.clearTimeout(timer);\n    }\n\n    timer = window.setTimeout(() => {\n      // Get the result of the inner function, then apply it to the resolve function of\n      // each promise that has been created since the last time the inner function was run\n      const result = inner(...args);\n      resolves.forEach(r => r(result));\n      resolves = [];\n    }, ms);\n    return new Promise(resolve => resolves.push(resolve));\n  };\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nconst normalizeChildren = (tag, context, slotProps) => {\n  if (!context.slots.default) {\n    return context.slots.default;\n  }\n\n  if (typeof tag === 'string' || !tag) {\n    return context.slots.default(slotProps());\n  }\n\n  return {\n    default: () => {\n      var _a, _b;\n\n      return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps());\n    }\n  };\n};\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\n\n\nfunction getBoundValue(el) {\n  if (hasValueBinding(el)) {\n    return el._value;\n  }\n\n  return undefined;\n}\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\n\n\nfunction hasValueBinding(el) {\n  return '_value' in el;\n}\n\nfunction normalizeEventValue(value) {\n  if (!isEvent(value)) {\n    return value;\n  }\n\n  const input = value.target; // Vue sets the current bound value on `_value` prop\n  // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\n\n  if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\n    return getBoundValue(input);\n  }\n\n  if (input.type === 'file' && input.files) {\n    return Array.from(input.files);\n  }\n\n  if (isNativeMultiSelect(input)) {\n    return Array.from(input.options).filter(opt => opt.selected && !opt.disabled).map(getBoundValue);\n  } // makes sure we get the actual `option` bound value\n  // #3440\n\n\n  if (isNativeSelect(input)) {\n    const selectedOption = Array.from(input.options).find(opt => opt.selected);\n    return selectedOption ? getBoundValue(selectedOption) : input.value;\n  }\n\n  return input.value;\n}\n/**\r\n * Normalizes the given rules expression.\r\n */\n\n\nfunction normalizeRules(rules) {\n  const acc = {};\n  Object.defineProperty(acc, '_$$isNormalized', {\n    value: true,\n    writable: false,\n    enumerable: false,\n    configurable: false\n  });\n\n  if (!rules) {\n    return acc;\n  } // Object is already normalized, skip.\n\n\n  if (isObject(rules) && rules._$$isNormalized) {\n    return rules;\n  }\n\n  if (isObject(rules)) {\n    return Object.keys(rules).reduce((prev, curr) => {\n      const params = normalizeParams(rules[curr]);\n\n      if (rules[curr] !== false) {\n        prev[curr] = buildParams(params);\n      }\n\n      return prev;\n    }, acc);\n  }\n  /* istanbul ignore if */\n\n\n  if (typeof rules !== 'string') {\n    return acc;\n  }\n\n  return rules.split('|').reduce((prev, rule) => {\n    const parsedRule = parseRule(rule);\n\n    if (!parsedRule.name) {\n      return prev;\n    }\n\n    prev[parsedRule.name] = buildParams(parsedRule.params);\n    return prev;\n  }, acc);\n}\n/**\r\n * Normalizes a rule param.\r\n */\n\n\nfunction normalizeParams(params) {\n  if (params === true) {\n    return [];\n  }\n\n  if (Array.isArray(params)) {\n    return params;\n  }\n\n  if (isObject(params)) {\n    return params;\n  }\n\n  return [params];\n}\n\nfunction buildParams(provided) {\n  const mapValueToLocator = value => {\n    // A target param using interpolation\n    if (typeof value === 'string' && value[0] === '@') {\n      return createLocator(value.slice(1));\n    }\n\n    return value;\n  };\n\n  if (Array.isArray(provided)) {\n    return provided.map(mapValueToLocator);\n  } // #3073\n\n\n  if (provided instanceof RegExp) {\n    return [provided];\n  }\n\n  return Object.keys(provided).reduce((prev, key) => {\n    prev[key] = mapValueToLocator(provided[key]);\n    return prev;\n  }, {});\n}\n/**\r\n * Parses a rule string expression.\r\n */\n\n\nconst parseRule = rule => {\n  let params = [];\n  const name = rule.split(':')[0];\n\n  if (rule.includes(':')) {\n    params = rule.split(':').slice(1).join(':').split(',');\n  }\n\n  return {\n    name,\n    params\n  };\n};\n\nfunction createLocator(value) {\n  const locator = crossTable => {\n    const val = getFromPath(crossTable, value) || crossTable[value];\n    return val;\n  };\n\n  locator.__locatorRef = value;\n  return locator;\n}\n\nfunction extractLocators(params) {\n  if (Array.isArray(params)) {\n    return params.filter(isLocator);\n  }\n\n  return keysOf(params).filter(key => isLocator(params[key])).map(key => params[key]);\n}\n\nconst DEFAULT_CONFIG = {\n  generateMessage: ({\n    field\n  }) => `${field} is not valid.`,\n  bails: true,\n  validateOnBlur: true,\n  validateOnChange: true,\n  validateOnInput: false,\n  validateOnModelUpdate: true\n};\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\n\nconst getConfig = () => currentConfig;\n\nconst setConfig = newConf => {\n  currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\n};\n\nconst configure = setConfig;\n/**\r\n * Validates a value against the rules.\r\n */\n\nasync function validate(value, rules, options = {}) {\n  const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\n  const field = {\n    name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\n    rules,\n    bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\n    formData: (options === null || options === void 0 ? void 0 : options.values) || {}\n  };\n  const result = await _validate(field, value);\n  const errors = result.errors;\n  return {\n    errors,\n    valid: !errors.length\n  };\n}\n/**\r\n * Starts the validation process.\r\n */\n\n\nasync function _validate(field, value) {\n  if (isYupValidator(field.rules)) {\n    return validateFieldWithYup(value, field.rules, {\n      bails: field.bails\n    });\n  } // if a generic function, use it as the pipeline.\n\n\n  if (isCallable(field.rules)) {\n    const ctx = {\n      field: field.name,\n      form: field.formData,\n      value: value\n    };\n    const result = await field.rules(value, ctx);\n    const isValid = typeof result !== 'string' && result;\n    const message = typeof result === 'string' ? result : _generateFieldError(ctx);\n    return {\n      errors: !isValid ? [message] : []\n    };\n  }\n\n  const normalizedContext = Object.assign(Object.assign({}, field), {\n    rules: normalizeRules(field.rules)\n  });\n  const errors = [];\n  const rulesKeys = Object.keys(normalizedContext.rules);\n  const length = rulesKeys.length;\n\n  for (let i = 0; i < length; i++) {\n    const rule = rulesKeys[i];\n    const result = await _test(normalizedContext, value, {\n      name: rule,\n      params: normalizedContext.rules[rule]\n    });\n\n    if (result.error) {\n      errors.push(result.error);\n\n      if (field.bails) {\n        return {\n          errors\n        };\n      }\n    }\n  }\n\n  return {\n    errors\n  };\n}\n/**\r\n * Handles yup validation\r\n */\n\n\nasync function validateFieldWithYup(value, validator, opts) {\n  var _a;\n\n  const errors = await validator.validate(value, {\n    abortEarly: (_a = opts.bails) !== null && _a !== void 0 ? _a : true\n  }).then(() => []).catch(err => {\n    // Yup errors have a name prop one them.\n    // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n    if (err.name === 'ValidationError') {\n      return err.errors;\n    } // re-throw the error so we don't hide it\n\n\n    throw err;\n  });\n  return {\n    errors\n  };\n}\n/**\r\n * Tests a single input value against a rule.\r\n */\n\n\nasync function _test(field, value, rule) {\n  const validator = resolveRule(rule.name);\n\n  if (!validator) {\n    throw new Error(`No such validator '${rule.name}' exists.`);\n  }\n\n  const params = fillTargetValues(rule.params, field.formData);\n  const ctx = {\n    field: field.name,\n    value,\n    form: field.formData,\n    rule: Object.assign(Object.assign({}, rule), {\n      params\n    })\n  };\n  const result = await validator(value, params, ctx);\n\n  if (typeof result === 'string') {\n    return {\n      error: result\n    };\n  }\n\n  return {\n    error: result ? undefined : _generateFieldError(ctx)\n  };\n}\n/**\r\n * Generates error messages.\r\n */\n\n\nfunction _generateFieldError(fieldCtx) {\n  const message = getConfig().generateMessage;\n\n  if (!message) {\n    return 'Field is invalid';\n  }\n\n  return message(fieldCtx);\n}\n\nfunction fillTargetValues(params, crossTable) {\n  const normalize = value => {\n    if (isLocator(value)) {\n      return value(crossTable);\n    }\n\n    return value;\n  };\n\n  if (Array.isArray(params)) {\n    return params.map(normalize);\n  }\n\n  return Object.keys(params).reduce((acc, param) => {\n    acc[param] = normalize(params[param]);\n    return acc;\n  }, {});\n}\n\nasync function validateYupSchema(schema, values) {\n  const errorObjects = await schema.validate(values, {\n    abortEarly: false\n  }).then(() => []).catch(err => {\n    // Yup errors have a name prop one them.\n    // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n    if (err.name !== 'ValidationError') {\n      throw err;\n    } // list of aggregated errors\n\n\n    return err.inner || [];\n  });\n  const results = {};\n  const errors = {};\n\n  for (const error of errorObjects) {\n    const messages = error.errors;\n    results[error.path] = {\n      valid: !messages.length,\n      errors: messages\n    };\n\n    if (messages.length) {\n      errors[error.path] = messages[0];\n    }\n  }\n\n  return {\n    valid: !errorObjects.length,\n    results,\n    errors\n  };\n}\n\nasync function validateObjectSchema(schema, values, opts) {\n  const paths = keysOf(schema);\n  const validations = paths.map(async path => {\n    var _a, _b, _c;\n\n    const fieldResult = await validate(getFromPath(values, path), schema[path], {\n      name: ((_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path]) || path,\n      values: values,\n      bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true\n    });\n    return Object.assign(Object.assign({}, fieldResult), {\n      path\n    });\n  });\n  let isAllValid = true;\n  const validationResults = await Promise.all(validations);\n  const results = {};\n  const errors = {};\n\n  for (const result of validationResults) {\n    results[result.path] = {\n      valid: result.valid,\n      errors: result.errors\n    };\n\n    if (!result.valid) {\n      isAllValid = false;\n      errors[result.path] = result.errors[0];\n    }\n  }\n\n  return {\n    valid: isAllValid,\n    results,\n    errors\n  };\n}\n\nfunction set(obj, key, val) {\n  if (typeof val.value === 'object') val.value = klona(val.value);\n\n  if (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n    Object.defineProperty(obj, key, val);\n  } else obj[key] = val.value;\n}\n\nfunction klona(x) {\n  if (typeof x !== 'object') return x;\n  var i = 0,\n      k,\n      list,\n      tmp,\n      str = Object.prototype.toString.call(x);\n\n  if (str === '[object Object]') {\n    tmp = Object.create(x.__proto__ || null);\n  } else if (str === '[object Array]') {\n    tmp = Array(x.length);\n  } else if (str === '[object Set]') {\n    tmp = new Set();\n    x.forEach(function (val) {\n      tmp.add(klona(val));\n    });\n  } else if (str === '[object Map]') {\n    tmp = new Map();\n    x.forEach(function (val, key) {\n      tmp.set(klona(key), klona(val));\n    });\n  } else if (str === '[object Date]') {\n    tmp = new Date(+x);\n  } else if (str === '[object RegExp]') {\n    tmp = new RegExp(x.source, x.flags);\n  } else if (str === '[object DataView]') {\n    tmp = new x.constructor(klona(x.buffer));\n  } else if (str === '[object ArrayBuffer]') {\n    tmp = x.slice(0);\n  } else if (str.slice(-6) === 'Array]') {\n    // ArrayBuffer.isView(x)\n    // ~> `new` bcuz `Buffer.slice` => ref\n    tmp = new x.constructor(x);\n  }\n\n  if (tmp) {\n    for (list = Object.getOwnPropertySymbols(x); i < list.length; i++) {\n      set(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n    }\n\n    for (i = 0, list = Object.getOwnPropertyNames(x); i < list.length; i++) {\n      if (Object.hasOwnProperty.call(tmp, k = list[i]) && tmp[k] === x[k]) continue;\n      set(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n    }\n  }\n\n  return tmp || x;\n}\n\nvar es6 = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n    var length, i, keys;\n\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;\n\n      return true;\n    }\n\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) return false;\n\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n\n      for (i of a.entries()) if (!equal(i[1], b.get(i[0]))) return false;\n\n      return true;\n    }\n\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) return false;\n\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) if (a[i] !== b[i]) return false;\n\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  } // true if both NaN, false otherwise\n\n\n  return a !== a && b !== b;\n};\n\nlet ID_COUNTER = 0;\n\nfunction useFieldState(path, init) {\n  const {\n    value,\n    initialValue,\n    setInitialValue\n  } = _useFieldValue(path, init.modelValue, !init.standalone);\n\n  const {\n    errorMessage,\n    errors,\n    setErrors\n  } = _useFieldErrors(path, !init.standalone);\n\n  const meta = _useFieldMeta(value, initialValue, errors);\n\n  const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\n\n  function setState(state) {\n    var _a;\n\n    if ('value' in state) {\n      value.value = state.value;\n    }\n\n    if ('errors' in state) {\n      setErrors(state.errors);\n    }\n\n    if ('touched' in state) {\n      meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\n    }\n\n    if ('initialValue' in state) {\n      setInitialValue(state.initialValue);\n    }\n  }\n\n  return {\n    id,\n    path,\n    value,\n    initialValue,\n    meta,\n    errors,\n    errorMessage,\n    setState\n  };\n}\n/**\r\n * Creates the field value and resolves the initial value\r\n */\n\n\nfunction _useFieldValue(path, modelValue, shouldInjectForm) {\n  const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\n  const modelRef = ref(unref(modelValue));\n\n  function resolveInitialValue() {\n    if (!form) {\n      return unref(modelRef);\n    }\n\n    return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\n  }\n\n  function setInitialValue(value) {\n    if (!form) {\n      modelRef.value = value;\n      return;\n    }\n\n    form.setFieldInitialValue(unref(path), value);\n  }\n\n  const initialValue = computed(resolveInitialValue); // if no form is associated, use a regular ref.\n\n  if (!form) {\n    const value = ref(resolveInitialValue());\n    return {\n      value,\n      initialValue,\n      setInitialValue\n    };\n  } // to set the initial value, first check if there is a current value, if there is then use it.\n  // otherwise use the configured initial value if it exists.\n  // prioritize model value over form values\n  // #3429\n\n\n  const currentValue = modelValue ? unref(modelValue) : getFromPath(form.values, unref(path), unref(initialValue));\n  form.stageInitialValue(unref(path), currentValue); // otherwise use a computed setter that triggers the `setFieldValue`\n\n  const value = computed({\n    get() {\n      return getFromPath(form.values, unref(path));\n    },\n\n    set(newVal) {\n      form.setFieldValue(unref(path), newVal);\n    }\n\n  });\n  return {\n    value,\n    initialValue,\n    setInitialValue\n  };\n}\n/**\r\n * Creates meta flags state and some associated effects with them\r\n */\n\n\nfunction _useFieldMeta(currentValue, initialValue, errors) {\n  const meta = reactive({\n    touched: false,\n    pending: false,\n    valid: true,\n    validated: !!unref(errors).length,\n    initialValue: computed(() => unref(initialValue)),\n    dirty: computed(() => {\n      return !es6(unref(currentValue), unref(initialValue));\n    })\n  });\n  watch(errors, value => {\n    meta.valid = !value.length;\n  }, {\n    immediate: true,\n    flush: 'sync'\n  });\n  return meta;\n}\n/**\r\n * Creates the error message state for the field state\r\n */\n\n\nfunction _useFieldErrors(path, shouldInjectForm) {\n  const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\n\n  function normalizeErrors(messages) {\n    if (!messages) {\n      return [];\n    }\n\n    return Array.isArray(messages) ? messages : [messages];\n  }\n\n  if (!form) {\n    const errors = ref([]);\n    return {\n      errors,\n      errorMessage: computed(() => errors.value[0]),\n      setErrors: messages => {\n        errors.value = normalizeErrors(messages);\n      }\n    };\n  }\n\n  const errors = computed(() => form.errorBag.value[unref(path)] || []);\n  return {\n    errors,\n    errorMessage: computed(() => errors.value[0]),\n    setErrors: messages => {\n      form.setFieldErrorBag(unref(path), normalizeErrors(messages));\n    }\n  };\n}\n\nfunction installDevtoolsPlugin(app) {\n  if (process.env.NODE_ENV !== 'production') {\n    setupDevtoolsPlugin({\n      id: 'vee-validate-devtools-plugin',\n      label: 'VeeValidate Plugin',\n      packageName: 'vee-validate',\n      homepage: 'https://vee-validate.logaretm.com/v4',\n      app,\n      logo: 'https://vee-validate.logaretm.com/v4/logo.png'\n    }, setupApiHooks);\n  }\n}\n\nconst DEVTOOLS_FORMS = {};\nconst DEVTOOLS_FIELDS = {};\nlet API;\nconst refreshInspector = throttle(() => {\n  setTimeout(async () => {\n    await nextTick();\n    API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\n    API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\n  }, 100);\n}, 100);\n\nfunction registerFormWithDevTools(form) {\n  const vm = getCurrentInstance();\n\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n\n    if (!app) {\n      return;\n    }\n\n    installDevtoolsPlugin(app);\n  }\n\n  DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\n  DEVTOOLS_FORMS[form.formId]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FORMS[form.formId];\n    refreshInspector();\n  });\n  refreshInspector();\n}\n\nfunction registerSingleFieldWithDevtools(field) {\n  const vm = getCurrentInstance();\n\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n\n    if (!app) {\n      return;\n    }\n\n    installDevtoolsPlugin(app);\n  }\n\n  DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\n  DEVTOOLS_FIELDS[field.id]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FIELDS[field.id];\n    refreshInspector();\n  });\n  refreshInspector();\n}\n\nconst INSPECTOR_ID = 'vee-validate-inspector';\nconst COLORS = {\n  error: 0xbd4b4b,\n  success: 0x06d77b,\n  unknown: 0x54436b,\n  white: 0xffffff,\n  black: 0x000000,\n  blue: 0x035397,\n  purple: 0xb980f0,\n  orange: 0xf5a962,\n  gray: 0xbbbfca\n};\nlet SELECTED_NODE = null;\n\nfunction setupApiHooks(api) {\n  API = api;\n  api.addInspector({\n    id: INSPECTOR_ID,\n    icon: 'rule',\n    label: 'vee-validate',\n    noSelectionText: 'Select a vee-validate node to inspect',\n    actions: [{\n      icon: 'done_outline',\n      tooltip: 'Validate selected item',\n      action: async () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n\n        const result = await SELECTED_NODE.validate();\n        console.log(result);\n      }\n    }, {\n      icon: 'delete_sweep',\n      tooltip: 'Clear validation state of the selected item',\n      action: () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n\n        if ('id' in SELECTED_NODE) {\n          SELECTED_NODE.resetField();\n          return;\n        }\n\n        SELECTED_NODE.resetForm();\n      }\n    }]\n  });\n  api.on.getInspectorTree(payload => {\n    if (payload.inspectorId !== INSPECTOR_ID) {\n      return;\n    }\n\n    const forms = Object.values(DEVTOOLS_FORMS);\n    const fields = Object.values(DEVTOOLS_FIELDS);\n    payload.rootNodes = [...forms.map(mapFormForDevtoolsInspector), ...fields.map(field => mapFieldForDevtoolsInspector(field))];\n  });\n  api.on.getInspectorState((payload, ctx) => {\n    if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\n      return;\n    }\n\n    const {\n      form,\n      field,\n      type\n    } = decodeNodeId(payload.nodeId);\n\n    if (form && type === 'form') {\n      payload.state = buildFormState(form);\n      SELECTED_NODE = form;\n      return;\n    }\n\n    if (field && type === 'field') {\n      payload.state = buildFieldState(field);\n      SELECTED_NODE = field;\n      return;\n    }\n\n    SELECTED_NODE = null;\n  });\n}\n\nfunction mapFormForDevtoolsInspector(form) {\n  const {\n    textColor,\n    bgColor\n  } = getTagTheme(form);\n  const formTreeNodes = {};\n  Object.values(form.fieldsByPath.value).forEach(field => {\n    const fieldInstance = Array.isArray(field) ? field[0] : field;\n\n    if (!fieldInstance) {\n      return;\n    }\n\n    setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\n  });\n\n  function buildFormTree(tree, path = []) {\n    const key = [...path].pop();\n\n    if ('id' in tree) {\n      return Object.assign(Object.assign({}, tree), {\n        label: key || tree.label\n      });\n    }\n\n    if (isObject(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: key || '',\n        children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key]))\n      };\n    }\n\n    if (Array.isArray(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: `${key}[]`,\n        children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)]))\n      };\n    }\n\n    return {\n      id: '',\n      label: '',\n      children: []\n    };\n  }\n\n  const {\n    children\n  } = buildFormTree(formTreeNodes);\n  return {\n    id: encodeNodeId(form),\n    label: 'Form',\n    children,\n    tags: [{\n      label: 'Form',\n      textColor,\n      backgroundColor: bgColor\n    }, {\n      label: `${Object.keys(form.fieldsByPath.value).length} fields`,\n      textColor: COLORS.white,\n      backgroundColor: COLORS.unknown\n    }]\n  };\n}\n\nfunction mapFieldForDevtoolsInspector(field, form) {\n  const fieldInstance = normalizeField(field);\n  const {\n    textColor,\n    bgColor\n  } = getTagTheme(fieldInstance);\n  const isGroup = Array.isArray(field) && field.length > 1;\n  return {\n    id: encodeNodeId(form, fieldInstance, !isGroup),\n    label: unref(fieldInstance.name),\n    children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\n    tags: [isGroup ? undefined : {\n      label: 'Field',\n      textColor,\n      backgroundColor: bgColor\n    }, !form ? {\n      label: 'Standalone',\n      textColor: COLORS.black,\n      backgroundColor: COLORS.gray\n    } : undefined, !isGroup && fieldInstance.type === 'checkbox' ? {\n      label: 'Checkbox',\n      textColor: COLORS.white,\n      backgroundColor: COLORS.blue\n    } : undefined, !isGroup && fieldInstance.type === 'radio' ? {\n      label: 'Radio',\n      textColor: COLORS.white,\n      backgroundColor: COLORS.purple\n    } : undefined, isGroup ? {\n      label: 'Group',\n      textColor: COLORS.black,\n      backgroundColor: COLORS.orange\n    } : undefined].filter(Boolean)\n  };\n}\n\nfunction encodeNodeId(form, field, encodeIndex = true) {\n  const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\n  const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\n  let idx;\n\n  if (encodeIndex && field && Array.isArray(fieldGroup)) {\n    idx = fieldGroup.indexOf(field);\n  }\n\n  const idObject = {\n    f: form === null || form === void 0 ? void 0 : form.formId,\n    ff: fieldPath,\n    idx,\n    type: field ? 'field' : 'form'\n  };\n  return btoa(JSON.stringify(idObject));\n}\n\nfunction decodeNodeId(nodeId) {\n  try {\n    const idObject = JSON.parse(atob(nodeId));\n    const form = DEVTOOLS_FORMS[idObject.f];\n\n    if (!form && idObject.ff) {\n      const field = DEVTOOLS_FIELDS[idObject.ff];\n\n      if (!field) {\n        return {};\n      }\n\n      return {\n        type: idObject.type,\n        field\n      };\n    }\n\n    if (!form) {\n      return {};\n    }\n\n    const fieldGroup = form.fieldsByPath.value[idObject.ff];\n    return {\n      type: idObject.type,\n      form,\n      field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup\n    };\n  } catch (err) {// console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\n  }\n\n  return {};\n}\n\nfunction buildFieldState(field) {\n  const {\n    errors,\n    meta,\n    value\n  } = field;\n  return {\n    'Field state': [{\n      key: 'errors',\n      value: errors.value\n    }, {\n      key: 'initialValue',\n      value: meta.initialValue\n    }, {\n      key: 'currentValue',\n      value: value.value\n    }, {\n      key: 'touched',\n      value: meta.touched\n    }, {\n      key: 'dirty',\n      value: meta.dirty\n    }, {\n      key: 'valid',\n      value: meta.valid\n    }]\n  };\n}\n\nfunction buildFormState(form) {\n  const {\n    errorBag,\n    meta,\n    values,\n    isSubmitting,\n    submitCount\n  } = form;\n  return {\n    'Form state': [{\n      key: 'submitCount',\n      value: submitCount.value\n    }, {\n      key: 'isSubmitting',\n      value: isSubmitting.value\n    }, {\n      key: 'touched',\n      value: meta.value.touched\n    }, {\n      key: 'dirty',\n      value: meta.value.dirty\n    }, {\n      key: 'valid',\n      value: meta.value.valid\n    }, {\n      key: 'initialValues',\n      value: meta.value.initialValues\n    }, {\n      key: 'currentValues',\n      value: values\n    }, {\n      key: 'errors',\n      value: keysOf(errorBag.value).reduce((acc, key) => {\n        var _a;\n\n        const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\n\n        if (message) {\n          acc[key] = message;\n        }\n\n        return acc;\n      }, {})\n    }]\n  };\n}\n/**\r\n * Resolves the tag color based on the form state\r\n */\n\n\nfunction getTagTheme(fieldOrForm) {\n  // const fallbackColors = {\n  //   bgColor: COLORS.unknown,\n  //   textColor: COLORS.white,\n  // };\n  const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\n  return {\n    bgColor: isValid ? COLORS.success : COLORS.error,\n    textColor: isValid ? COLORS.black : COLORS.white\n  };\n}\n/**\r\n * Creates a field composite.\r\n */\n\n\nfunction useField(name, rules, opts) {\n  if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\n    return useCheckboxField(name, rules, opts);\n  }\n\n  return _useField(name, rules, opts);\n}\n\nfunction _useField(name, rules, opts) {\n  const {\n    initialValue: modelValue,\n    validateOnMount,\n    bails,\n    type,\n    checkedValue,\n    label,\n    validateOnValueUpdate,\n    uncheckedValue,\n    standalone\n  } = normalizeOptions(unref(name), opts);\n  const form = !standalone ? injectWithSelf(FormContextKey) : undefined;\n  const {\n    id,\n    value,\n    initialValue,\n    meta,\n    setState,\n    errors,\n    errorMessage\n  } = useFieldState(name, {\n    modelValue,\n    standalone\n  });\n  /**\r\n   * Handles common onBlur meta update\r\n   */\n\n  const handleBlur = () => {\n    meta.touched = true;\n  };\n\n  const normalizedRules = computed(() => {\n    let rulesValue = unref(rules);\n    const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\n\n    if (schema && !isYupValidator(schema)) {\n      rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\n    }\n\n    if (isYupValidator(rulesValue) || isCallable(rulesValue)) {\n      return rulesValue;\n    }\n\n    return normalizeRules(rulesValue);\n  });\n\n  async function validateCurrentValue(mode) {\n    var _a, _b;\n\n    if (form === null || form === void 0 ? void 0 : form.validateSchema) {\n      return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : {\n        valid: true,\n        errors: []\n      };\n    }\n\n    return validate(value.value, normalizedRules.value, {\n      name: unref(label) || unref(name),\n      values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\n      bails\n    });\n  }\n\n  async function validateWithStateMutation() {\n    meta.pending = true;\n    meta.validated = true;\n    const result = await validateCurrentValue('validated-only');\n    setState({\n      errors: result.errors\n    });\n    meta.pending = false;\n    return result;\n  }\n\n  async function validateValidStateOnly() {\n    const result = await validateCurrentValue('silent');\n    meta.valid = result.valid;\n    return result;\n  }\n\n  function validate$1(opts) {\n    if (!(opts === null || opts === void 0 ? void 0 : opts.mode) || (opts === null || opts === void 0 ? void 0 : opts.mode) === 'force') {\n      return validateWithStateMutation();\n    }\n\n    if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'validated-only') {\n      return validateWithStateMutation();\n    }\n\n    return validateValidStateOnly();\n  } // Common input/change event handler\n\n\n  const handleChange = (e, shouldValidate = true) => {\n    const newValue = normalizeEventValue(e);\n    value.value = newValue;\n\n    if (!validateOnValueUpdate && shouldValidate) {\n      validateWithStateMutation();\n    }\n  }; // Runs the initial validation\n\n\n  onMounted(() => {\n    if (validateOnMount) {\n      return validateWithStateMutation();\n    } // validate self initially if no form was handling this\n    // forms should have their own initial silent validation run to make things more efficient\n\n\n    if (!form || !form.validateSchema) {\n      validateValidStateOnly();\n    }\n  });\n\n  function setTouched(isTouched) {\n    meta.touched = isTouched;\n  }\n\n  let unwatchValue;\n\n  function watchValue() {\n    unwatchValue = watch(value, validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly, {\n      deep: true\n    });\n  }\n\n  watchValue();\n\n  function resetField(state) {\n    var _a;\n\n    unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\n    const newValue = state && 'value' in state ? state.value : initialValue.value;\n    setState({\n      value: klona(newValue),\n      initialValue: klona(newValue),\n      touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\n      errors: (state === null || state === void 0 ? void 0 : state.errors) || []\n    });\n    meta.pending = false;\n    meta.validated = false;\n    validateValidStateOnly(); // need to watch at next tick to avoid triggering the value watcher\n\n    nextTick(() => {\n      watchValue();\n    });\n  }\n\n  function setValue(newValue) {\n    value.value = newValue;\n  }\n\n  function setErrors(errors) {\n    setState({\n      errors: Array.isArray(errors) ? errors : [errors]\n    });\n  }\n\n  const field = {\n    id,\n    name,\n    label,\n    value,\n    meta,\n    errors,\n    errorMessage,\n    type,\n    checkedValue,\n    uncheckedValue,\n    bails,\n    resetField,\n    handleReset: () => resetField(),\n    validate: validate$1,\n    handleChange,\n    handleBlur,\n    setState,\n    setTouched,\n    setErrors,\n    setValue\n  };\n  provide(FieldContextKey, field);\n\n  if (isRef(rules) && typeof unref(rules) !== 'function') {\n    watch(rules, (value, oldValue) => {\n      if (es6(value, oldValue)) {\n        return;\n      }\n\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }, {\n      deep: true\n    });\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    field._vm = getCurrentInstance();\n    watch(() => Object.assign(Object.assign({\n      errors: errors.value\n    }, meta), {\n      value: value.value\n    }), refreshInspector, {\n      deep: true\n    });\n\n    if (!form) {\n      registerSingleFieldWithDevtools(field);\n    }\n  } // if no associated form return the field API immediately\n\n\n  if (!form) {\n    return field;\n  } // associate the field with the given form\n\n\n  form.register(field);\n  onBeforeUnmount(() => {\n    form.unregister(field);\n  }); // extract cross-field dependencies in a computed prop\n\n  const dependencies = computed(() => {\n    const rulesVal = normalizedRules.value; // is falsy, a function schema or a yup schema\n\n    if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal)) {\n      return {};\n    }\n\n    return Object.keys(rulesVal).reduce((acc, rule) => {\n      const deps = extractLocators(rulesVal[rule]).map(dep => dep.__locatorRef).reduce((depAcc, depName) => {\n        const depValue = getFromPath(form.values, depName) || form.values[depName];\n\n        if (depValue !== undefined) {\n          depAcc[depName] = depValue;\n        }\n\n        return depAcc;\n      }, {});\n      Object.assign(acc, deps);\n      return acc;\n    }, {});\n  }); // Adds a watcher that runs the validation whenever field dependencies change\n\n  watch(dependencies, (deps, oldDeps) => {\n    // Skip if no dependencies or if the field wasn't manipulated\n    if (!Object.keys(deps).length) {\n      return;\n    }\n\n    const shouldValidate = !es6(deps, oldDeps);\n\n    if (shouldValidate) {\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }\n  });\n  return field;\n}\n/**\r\n * Normalizes partial field options to include the full options\r\n */\n\n\nfunction normalizeOptions(name, opts) {\n  const defaults = () => ({\n    initialValue: undefined,\n    validateOnMount: false,\n    bails: true,\n    rules: '',\n    label: name,\n    validateOnValueUpdate: true,\n    standalone: false\n  });\n\n  if (!opts) {\n    return defaults();\n  } // TODO: Deprecate this in next major release\n\n\n  const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\n  return Object.assign(Object.assign(Object.assign({}, defaults()), opts || {}), {\n    checkedValue\n  });\n}\n/**\r\n * Extracts the validation rules from a schema\r\n */\n\n\nfunction extractRuleFromSchema(schema, fieldName) {\n  // no schema at all\n  if (!schema) {\n    return undefined;\n  } // there is a key on the schema object for this field\n\n\n  return schema[fieldName];\n}\n\nfunction useCheckboxField(name, rules, opts) {\n  const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\n  const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\n  const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\n\n  function patchCheckboxApi(field) {\n    const handleChange = field.handleChange;\n    const checked = computed(() => {\n      const currentValue = unref(field.value);\n      const checkedVal = unref(checkedValue);\n      return Array.isArray(currentValue) ? currentValue.includes(checkedVal) : checkedVal === currentValue;\n    });\n\n    function handleCheckboxChange(e, shouldValidate = true) {\n      var _a, _b;\n\n      if (checked.value === ((_b = (_a = e) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.checked)) {\n        return;\n      }\n\n      let newValue = normalizeEventValue(e); // Single checkbox field without a form to toggle it's value\n\n      if (!form) {\n        newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\n      }\n\n      handleChange(newValue, shouldValidate);\n    }\n\n    onBeforeUnmount(() => {\n      // toggles the checkbox value if it was checked\n      if (checked.value) {\n        handleCheckboxChange(unref(checkedValue), false);\n      }\n    });\n    return Object.assign(Object.assign({}, field), {\n      checked,\n      checkedValue,\n      uncheckedValue,\n      handleChange: handleCheckboxChange\n    });\n  }\n\n  return patchCheckboxApi(_useField(name, rules, opts));\n}\n\nconst FieldImpl = defineComponent({\n  name: 'Field',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: [String, Object],\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    rules: {\n      type: [Object, String, Function],\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    validateOnBlur: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnChange: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnInput: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnModelUpdate: {\n      type: Boolean,\n      default: undefined\n    },\n    bails: {\n      type: Boolean,\n      default: () => getConfig().bails\n    },\n    label: {\n      type: String,\n      default: undefined\n    },\n    uncheckedValue: {\n      type: null,\n      default: undefined\n    },\n    modelValue: {\n      type: null,\n      default: IS_ABSENT\n    },\n    modelModifiers: {\n      type: null,\n      default: () => ({})\n    },\n    'onUpdate:modelValue': {\n      type: null,\n      default: undefined\n    },\n    standalone: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  setup(props, ctx) {\n    const rules = toRef(props, 'rules');\n    const name = toRef(props, 'name');\n    const label = toRef(props, 'label');\n    const uncheckedValue = toRef(props, 'uncheckedValue');\n    const hasModelEvents = isPropPresent(props, 'onUpdate:modelValue');\n    const {\n      errors,\n      value,\n      errorMessage,\n      validate: validateField,\n      handleChange,\n      handleBlur,\n      setTouched,\n      resetField,\n      handleReset,\n      meta,\n      checked,\n      setErrors\n    } = useField(name, rules, {\n      validateOnMount: props.validateOnMount,\n      bails: props.bails,\n      standalone: props.standalone,\n      type: ctx.attrs.type,\n      initialValue: resolveInitialValue(props, ctx),\n      // Only for checkboxes and radio buttons\n      checkedValue: ctx.attrs.value,\n      uncheckedValue,\n      label,\n      validateOnValueUpdate: false\n    }); // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\n\n    const onChangeHandler = hasModelEvents ? function handleChangeWithModel(e, shouldValidate = true) {\n      handleChange(e, shouldValidate);\n      ctx.emit('update:modelValue', value.value);\n    } : handleChange;\n\n    const handleInput = e => {\n      if (!hasCheckedAttr(ctx.attrs.type)) {\n        value.value = normalizeEventValue(e);\n      }\n    };\n\n    const onInputHandler = hasModelEvents ? function handleInputWithModel(e) {\n      handleInput(e);\n      ctx.emit('update:modelValue', value.value);\n    } : handleInput;\n    const fieldProps = computed(() => {\n      const {\n        validateOnInput,\n        validateOnChange,\n        validateOnBlur,\n        validateOnModelUpdate\n      } = resolveValidationTriggers(props);\n      const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\n      const baseOnInput = [e => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\n      const baseOnChange = [e => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\n      const attrs = {\n        name: props.name,\n        onBlur: baseOnBlur,\n        onInput: baseOnInput,\n        onChange: baseOnChange\n      };\n\n      attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\n\n      if (hasCheckedAttr(ctx.attrs.type) && checked) {\n        attrs.checked = checked.value;\n      } else {\n        attrs.value = value.value;\n      }\n\n      const tag = resolveTag(props, ctx);\n\n      if (shouldHaveValueBinding(tag, ctx.attrs)) {\n        delete attrs.value;\n      }\n\n      return attrs;\n    });\n    const modelValue = toRef(props, 'modelValue');\n    watch(modelValue, newModelValue => {\n      // Don't attempt to sync absent values\n      if (newModelValue === IS_ABSENT && value.value === undefined) {\n        return;\n      }\n\n      if (newModelValue !== applyModifiers(value.value, props.modelModifiers)) {\n        value.value = newModelValue === IS_ABSENT ? undefined : newModelValue;\n        validateField();\n      }\n    });\n\n    function slotProps() {\n      return {\n        field: fieldProps.value,\n        value: value.value,\n        meta,\n        errors: errors.value,\n        errorMessage: errorMessage.value,\n        validate: validateField,\n        resetField,\n        handleChange: onChangeHandler,\n        handleInput: onInputHandler,\n        handleReset,\n        handleBlur,\n        setTouched,\n        setErrors\n      };\n    }\n\n    ctx.expose({\n      setErrors,\n      setTouched,\n      reset: resetField,\n      validate: validateField,\n      handleChange\n    });\n    return () => {\n      const tag = resolveDynamicComponent(resolveTag(props, ctx));\n      const children = normalizeChildren(tag, ctx, slotProps);\n\n      if (tag) {\n        return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\n      }\n\n      return children;\n    };\n  }\n\n});\n\nfunction resolveTag(props, ctx) {\n  let tag = props.as || '';\n\n  if (!props.as && !ctx.slots.default) {\n    tag = 'input';\n  }\n\n  return tag;\n}\n\nfunction resolveValidationTriggers(props) {\n  var _a, _b, _c, _d;\n\n  const {\n    validateOnInput,\n    validateOnChange,\n    validateOnBlur,\n    validateOnModelUpdate\n  } = getConfig();\n  return {\n    validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\n    validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\n    validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\n    validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate\n  };\n}\n\nfunction applyModifiers(value, modifiers) {\n  if (modifiers.number) {\n    return toNumber(value);\n  }\n\n  return value;\n}\n\nfunction resolveInitialValue(props, ctx) {\n  // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\n  // For checkboxes and radio buttons it will always be the model value not the `value` attribute\n  if (!hasCheckedAttr(ctx.attrs.type)) {\n    return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\n  }\n\n  return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\n}\n\nconst Field = FieldImpl;\nlet FORM_COUNTER = 0;\n\nfunction useForm(opts) {\n  const formId = FORM_COUNTER++; // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\n  // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\n\n  let RESET_LOCK = false; // A lookup containing fields or field groups\n\n  const fieldsByPath = ref({}); // If the form is currently submitting\n\n  const isSubmitting = ref(false); // The number of times the user tried to submit the form\n\n  const submitCount = ref(0); // dictionary for field arrays to receive various signals like reset\n\n  const fieldArraysLookup = {}; // a private ref for all form values\n\n  const formValues = reactive(klona(unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {})); // the source of errors for the form fields\n\n  const {\n    errorBag,\n    setErrorBag,\n    setFieldErrorBag\n  } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors); // Gets the first error of each field\n\n  const errors = computed(() => {\n    return keysOf(errorBag.value).reduce((acc, key) => {\n      const bag = errorBag.value[key];\n\n      if (bag && bag.length) {\n        acc[key] = bag[0];\n      }\n\n      return acc;\n    }, {});\n  });\n\n  function getFirstFieldAtPath(path) {\n    const fieldOrGroup = fieldsByPath.value[path];\n    return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\n  }\n\n  function fieldExists(path) {\n    return !!fieldsByPath.value[path];\n  }\n  /**\r\n   * Holds a computed reference to all fields names and labels\r\n   */\n\n\n  const fieldNames = computed(() => {\n    return keysOf(fieldsByPath.value).reduce((names, path) => {\n      const field = getFirstFieldAtPath(path);\n\n      if (field) {\n        names[path] = unref(field.label || field.name) || '';\n      }\n\n      return names;\n    }, {});\n  });\n  const fieldBailsMap = computed(() => {\n    return keysOf(fieldsByPath.value).reduce((map, path) => {\n      var _a;\n\n      const field = getFirstFieldAtPath(path);\n\n      if (field) {\n        map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\n      }\n\n      return map;\n    }, {});\n  }); // mutable non-reactive reference to initial errors\n  // we need this to process initial errors then unset them\n\n  const initialErrors = Object.assign({}, (opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {}); // initial form values\n\n  const {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  } = useFormInitialValues(fieldsByPath, formValues, opts === null || opts === void 0 ? void 0 : opts.initialValues); // form meta aggregations\n\n  const meta = useFormMeta(fieldsByPath, formValues, initialValues, errors);\n  const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\n  const formCtx = {\n    formId,\n    fieldsByPath,\n    values: formValues,\n    errorBag,\n    errors,\n    schema,\n    submitCount,\n    meta,\n    isSubmitting,\n    fieldArraysLookup,\n    validateSchema: unref(schema) ? validateSchema : undefined,\n    validate,\n    register: registerField,\n    unregister: unregisterField,\n    setFieldErrorBag,\n    validateField,\n    setFieldValue,\n    setValues,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setTouched,\n    resetForm,\n    handleSubmit,\n    stageInitialValue,\n    unsetInitialValue,\n    setFieldInitialValue\n  };\n\n  function isFieldGroup(fieldOrGroup) {\n    return Array.isArray(fieldOrGroup);\n  }\n\n  function applyFieldMutation(fieldOrGroup, mutation) {\n    if (Array.isArray(fieldOrGroup)) {\n      return fieldOrGroup.forEach(mutation);\n    }\n\n    return mutation(fieldOrGroup);\n  }\n  /**\r\n   * Manually sets an error message on a specific field\r\n   */\n\n\n  function setFieldError(field, message) {\n    setFieldErrorBag(field, message);\n  }\n  /**\r\n   * Sets errors for the fields specified in the object\r\n   */\n\n\n  function setErrors(fields) {\n    setErrorBag(fields);\n  }\n  /**\r\n   * Sets a single field value\r\n   */\n\n\n  function setFieldValue(field, value, {\n    force\n  } = {\n    force: false\n  }) {\n    var _a;\n\n    const fieldInstance = fieldsByPath.value[field];\n    const clonedValue = klona(value); // field wasn't found, create a virtual field as a placeholder\n\n    if (!fieldInstance) {\n      setInPath(formValues, field, clonedValue);\n      return;\n    }\n\n    if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\n      // Multiple checkboxes, and only one of them got updated\n      const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\n      setInPath(formValues, field, newValue);\n      return;\n    }\n\n    let newValue = value; // Single Checkbox: toggles the field value unless the field is being reset then force it\n\n    if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\n      newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\n    }\n\n    setInPath(formValues, field, newValue);\n  }\n  /**\r\n   * Sets multiple fields values\r\n   */\n\n\n  function setValues(fields) {\n    // clean up old values\n    keysOf(formValues).forEach(key => {\n      delete formValues[key];\n    }); // set up new values\n\n    keysOf(fields).forEach(path => {\n      setFieldValue(path, fields[path]);\n    }); // regenerate the arrays when the form values change\n\n    Object.values(fieldArraysLookup).forEach(f => f && f.reset());\n  }\n  /**\r\n   * Sets the touched meta state on a field\r\n   */\n\n\n  function setFieldTouched(field, isTouched) {\n    const fieldInstance = fieldsByPath.value[field];\n\n    if (fieldInstance) {\n      applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\n    }\n  }\n  /**\r\n   * Sets the touched meta state on multiple fields\r\n   */\n\n\n  function setTouched(fields) {\n    keysOf(fields).forEach(field => {\n      setFieldTouched(field, !!fields[field]);\n    });\n  }\n  /**\r\n   * Resets all fields\r\n   */\n\n\n  function resetForm(state) {\n    RESET_LOCK = true; // set initial values if provided\n\n    if (state === null || state === void 0 ? void 0 : state.values) {\n      setInitialValues(state.values);\n      setValues(state === null || state === void 0 ? void 0 : state.values);\n    } else {\n      // clean up the initial values back to the original\n      setInitialValues(originalInitialValues.value); // otherwise clean the current values\n\n      setValues(originalInitialValues.value);\n    }\n\n    Object.values(fieldsByPath.value).forEach(field => {\n      if (!field) {\n        return;\n      } // avoid resetting the field values, because they should've been reset already.\n\n\n      applyFieldMutation(field, f => f.resetField());\n    });\n\n    if (state === null || state === void 0 ? void 0 : state.touched) {\n      setTouched(state.touched);\n    }\n\n    setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\n    submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\n    nextTick(() => {\n      RESET_LOCK = false;\n    });\n  }\n\n  function insertFieldAtPath(field, path) {\n    const rawField = markRaw(field);\n    const fieldPath = path; // first field at that path\n\n    if (!fieldsByPath.value[fieldPath]) {\n      fieldsByPath.value[fieldPath] = rawField;\n      return;\n    }\n\n    const fieldAtPath = fieldsByPath.value[fieldPath];\n\n    if (fieldAtPath && !Array.isArray(fieldAtPath)) {\n      fieldsByPath.value[fieldPath] = [fieldAtPath];\n    } // add the new array to that path\n\n\n    fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\n  }\n\n  function removeFieldFromPath(field, path) {\n    const fieldPath = path;\n    const fieldAtPath = fieldsByPath.value[fieldPath];\n\n    if (!fieldAtPath) {\n      return;\n    } // same field at path\n\n\n    if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\n      delete fieldsByPath.value[fieldPath];\n      return;\n    }\n\n    if (isFieldGroup(fieldAtPath)) {\n      const idx = fieldAtPath.findIndex(f => f.id === field.id);\n\n      if (idx === -1) {\n        return;\n      }\n\n      fieldAtPath.splice(idx, 1);\n\n      if (fieldAtPath.length === 1) {\n        fieldsByPath.value[fieldPath] = fieldAtPath[0];\n        return;\n      }\n\n      if (!fieldAtPath.length) {\n        delete fieldsByPath.value[fieldPath];\n      }\n    }\n  }\n\n  function registerField(field) {\n    const fieldPath = unref(field.name);\n    insertFieldAtPath(field, fieldPath);\n\n    if (isRef(field.name)) {\n      // ensures when a field's name was already taken that it preserves its same value\n      // necessary for fields generated by loops\n      watch(field.name, async (newPath, oldPath) => {\n        // cache the value\n        await nextTick();\n        removeFieldFromPath(field, oldPath);\n        insertFieldAtPath(field, newPath); // re-validate if either path had errors before\n\n        if (errors.value[oldPath] || errors.value[newPath]) {\n          validateField(newPath);\n        } // clean up the old path if no other field is sharing that name\n        // #3325\n\n\n        await nextTick();\n\n        if (!fieldExists(oldPath)) {\n          unsetPath(formValues, oldPath);\n        }\n      });\n    } // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\n    // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\n    // #3342\n\n\n    const initialErrorMessage = unref(field.errorMessage);\n\n    if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\n      validateField(fieldPath);\n    } // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\n\n\n    delete initialErrors[fieldPath];\n  }\n\n  function unregisterField(field) {\n    const fieldName = unref(field.name);\n    removeFieldFromPath(field, fieldName);\n    nextTick(() => {\n      // clears a field error on unmounted\n      // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\n      // #3384\n      if (!fieldExists(fieldName)) {\n        setFieldError(fieldName, undefined);\n        unsetPath(formValues, fieldName);\n      }\n    });\n  }\n\n  async function validate(opts) {\n    if (formCtx.validateSchema) {\n      return formCtx.validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'force');\n    } // No schema, each field is responsible to validate itself\n\n\n    const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\n      const fieldInstance = Array.isArray(field) ? field[0] : field;\n\n      if (!fieldInstance) {\n        return Promise.resolve({\n          key: '',\n          valid: true,\n          errors: []\n        });\n      }\n\n      return fieldInstance.validate(opts).then(result => {\n        return {\n          key: unref(fieldInstance.name),\n          valid: result.valid,\n          errors: result.errors\n        };\n      });\n    }));\n    const results = {};\n    const errors = {};\n\n    for (const validation of validations) {\n      results[validation.key] = {\n        valid: validation.valid,\n        errors: validation.errors\n      };\n\n      if (validation.errors.length) {\n        errors[validation.key] = validation.errors[0];\n      }\n    }\n\n    return {\n      valid: validations.every(r => r.valid),\n      results,\n      errors\n    };\n  }\n\n  async function validateField(field) {\n    const fieldInstance = fieldsByPath.value[field];\n\n    if (!fieldInstance) {\n      warn$1(`field with name ${field} was not found`);\n      return Promise.resolve({\n        errors: [],\n        valid: true\n      });\n    }\n\n    if (Array.isArray(fieldInstance)) {\n      return fieldInstance.map(f => f.validate())[0];\n    }\n\n    return fieldInstance.validate();\n  }\n\n  function handleSubmit(fn, onValidationError) {\n    return function submissionHandler(e) {\n      if (e instanceof Event) {\n        e.preventDefault();\n        e.stopPropagation();\n      } // Touch all fields\n\n\n      setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\n        acc[field] = true;\n        return acc;\n      }, {}));\n      isSubmitting.value = true;\n      submitCount.value++;\n      return validate().then(result => {\n        if (result.valid && typeof fn === 'function') {\n          return fn(klona(formValues), {\n            evt: e,\n            setErrors,\n            setFieldError,\n            setTouched,\n            setFieldTouched,\n            setValues,\n            setFieldValue,\n            resetForm\n          });\n        }\n\n        if (!result.valid && typeof onValidationError === 'function') {\n          onValidationError({\n            values: klona(formValues),\n            evt: e,\n            errors: result.errors,\n            results: result.results\n          });\n        }\n      }).then(returnVal => {\n        isSubmitting.value = false;\n        return returnVal;\n      }, err => {\n        isSubmitting.value = false; // re-throw the err so it doesn't go silent\n\n        throw err;\n      });\n    };\n  }\n\n  function setFieldInitialValue(path, value) {\n    setInPath(initialValues.value, path, klona(value));\n  }\n\n  function unsetInitialValue(path) {\n    unsetPath(initialValues.value, path);\n  }\n  /**\r\n   * Sneaky function to set initial field values\r\n   */\n\n\n  function stageInitialValue(path, value) {\n    setInPath(formValues, path, value);\n    setFieldInitialValue(path, value);\n  }\n\n  async function _validateSchema() {\n    const schemaValue = unref(schema);\n\n    if (!schemaValue) {\n      return {\n        valid: true,\n        results: {},\n        errors: {}\n      };\n    }\n\n    const formResult = isYupValidator(schemaValue) ? await validateYupSchema(schemaValue, formValues) : await validateObjectSchema(schemaValue, formValues, {\n      names: fieldNames.value,\n      bailsMap: fieldBailsMap.value\n    });\n    return formResult;\n  }\n  /**\r\n   * Batches validation runs in 5ms batches\r\n   */\n\n\n  const debouncedSchemaValidation = debounceAsync(_validateSchema, 5);\n\n  async function validateSchema(mode) {\n    const formResult = await debouncedSchemaValidation(); // fields by id lookup\n\n    const fieldsById = formCtx.fieldsByPath.value || {}; // errors fields names, we need it to also check if custom errors are updated\n\n    const currentErrorsPaths = keysOf(formCtx.errorBag.value); // collect all the keys from the schema and all fields\n    // this ensures we have a complete keymap of all the fields\n\n    const paths = [...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths])]; // aggregates the paths into a single result object while applying the results on the fields\n\n    return paths.reduce((validation, path) => {\n      const field = fieldsById[path];\n      const messages = (formResult.results[path] || {\n        errors: []\n      }).errors;\n      const fieldResult = {\n        errors: messages,\n        valid: !messages.length\n      };\n      validation.results[path] = fieldResult;\n\n      if (!fieldResult.valid) {\n        validation.errors[path] = fieldResult.errors[0];\n      } // field not rendered\n\n\n      if (!field) {\n        setFieldError(path, messages);\n        return validation;\n      } // always update the valid flag regardless of the mode\n\n\n      applyFieldMutation(field, f => f.meta.valid = fieldResult.valid);\n\n      if (mode === 'silent') {\n        return validation;\n      }\n\n      const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\n\n      if (mode === 'validated-only' && !wasValidated) {\n        return validation;\n      }\n\n      applyFieldMutation(field, f => f.setState({\n        errors: fieldResult.errors\n      }));\n      return validation;\n    }, {\n      valid: formResult.valid,\n      results: {},\n      errors: {}\n    });\n  }\n\n  const submitForm = handleSubmit((_, {\n    evt\n  }) => {\n    if (isFormSubmitEvent(evt)) {\n      evt.target.submit();\n    }\n  }); // Trigger initial validation\n\n  onMounted(() => {\n    if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n      setErrors(opts.initialErrors);\n    }\n\n    if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\n      setTouched(opts.initialTouched);\n    } // if validate on mount was enabled\n\n\n    if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\n      validate();\n      return;\n    } // otherwise run initial silent validation through schema if available\n    // the useField should skip their own silent validation if a yup schema is present\n\n\n    if (formCtx.validateSchema) {\n      formCtx.validateSchema('silent');\n    }\n  });\n\n  if (isRef(schema)) {\n    watch(schema, () => {\n      var _a;\n\n      (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\n    });\n  } // Provide injections\n\n\n  provide(FormContextKey, formCtx);\n\n  if (process.env.NODE_ENV !== 'production') {\n    registerFormWithDevTools(formCtx);\n    watch(() => Object.assign(Object.assign({\n      errors: errorBag.value\n    }, meta.value), {\n      values: formValues,\n      isSubmitting: isSubmitting.value,\n      submitCount: submitCount.value\n    }), refreshInspector, {\n      deep: true\n    });\n  }\n\n  return {\n    errors,\n    meta,\n    values: formValues,\n    isSubmitting,\n    submitCount,\n    validate,\n    validateField,\n    handleReset: () => resetForm(),\n    resetForm,\n    handleSubmit,\n    submitForm,\n    setFieldError,\n    setErrors,\n    setFieldValue,\n    setValues,\n    setFieldTouched,\n    setTouched\n  };\n}\n/**\r\n * Manages form meta aggregation\r\n */\n\n\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\n  const MERGE_STRATEGIES = {\n    touched: 'some',\n    pending: 'some',\n    valid: 'every'\n  };\n  const isDirty = computed(() => {\n    return !es6(currentValues, unref(initialValues));\n  });\n\n  function calculateFlags() {\n    const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\n    return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\n      const mergeMethod = MERGE_STRATEGIES[flag];\n      acc[flag] = fields[mergeMethod](field => field.meta[flag]);\n      return acc;\n    }, {});\n  }\n\n  const flags = reactive(calculateFlags());\n  watchEffect(() => {\n    const value = calculateFlags();\n    flags.touched = value.touched;\n    flags.valid = value.valid;\n    flags.pending = value.pending;\n  });\n  return computed(() => {\n    return Object.assign(Object.assign({\n      initialValues: unref(initialValues)\n    }, flags), {\n      valid: flags.valid && !keysOf(errors.value).length,\n      dirty: isDirty.value\n    });\n  });\n}\n/**\r\n * Manages the initial values prop\r\n */\n\n\nfunction useFormInitialValues(fields, formValues, providedValues) {\n  // these are the mutable initial values as the fields are mounted/unmounted\n  const initialValues = ref(klona(unref(providedValues)) || {}); // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\n  // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\n  // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\n  // so these are the values that the reset function should use\n  // these only change when the user explicitly chanegs the initial values or when the user resets them with new values.\n\n  const originalInitialValues = ref(klona(unref(providedValues)) || {});\n\n  function setInitialValues(values, updateFields = false) {\n    initialValues.value = klona(values);\n    originalInitialValues.value = klona(values);\n\n    if (!updateFields) {\n      return;\n    } // update the pristine non-touched fields\n    // those are excluded because it's unlikely you want to change the form values using initial values\n    // we mostly watch them for API population or newly inserted fields\n    // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\n\n\n    keysOf(fields.value).forEach(fieldPath => {\n      const field = fields.value[fieldPath];\n      const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\n\n      if (!field || wasTouched) {\n        return;\n      }\n\n      const newValue = getFromPath(initialValues.value, fieldPath);\n      setInPath(formValues, fieldPath, klona(newValue));\n    });\n  }\n\n  if (isRef(providedValues)) {\n    watch(providedValues, value => {\n      setInitialValues(value, true);\n    }, {\n      deep: true\n    });\n  }\n\n  return {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  };\n}\n\nfunction useErrorBag(initialErrors) {\n  const errorBag = ref({});\n\n  function normalizeErrorItem(message) {\n    return Array.isArray(message) ? message : message ? [message] : [];\n  }\n  /**\r\n   * Manually sets an error message on a specific field\r\n   */\n\n\n  function setFieldErrorBag(field, message) {\n    if (!message) {\n      delete errorBag.value[field];\n      return;\n    }\n\n    errorBag.value[field] = normalizeErrorItem(message);\n  }\n  /**\r\n   * Sets errors for the fields specified in the object\r\n   */\n\n\n  function setErrorBag(fields) {\n    errorBag.value = keysOf(fields).reduce((acc, key) => {\n      const message = fields[key];\n\n      if (message) {\n        acc[key] = normalizeErrorItem(message);\n      }\n\n      return acc;\n    }, {});\n  }\n\n  if (initialErrors) {\n    setErrorBag(initialErrors);\n  }\n\n  return {\n    errorBag,\n    setErrorBag,\n    setFieldErrorBag\n  };\n}\n\nconst FormImpl = defineComponent({\n  name: 'Form',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: String,\n      default: 'form'\n    },\n    validationSchema: {\n      type: Object,\n      default: undefined\n    },\n    initialValues: {\n      type: Object,\n      default: undefined\n    },\n    initialErrors: {\n      type: Object,\n      default: undefined\n    },\n    initialTouched: {\n      type: Object,\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    onSubmit: {\n      type: Function,\n      default: undefined\n    },\n    onInvalidSubmit: {\n      type: Function,\n      default: undefined\n    }\n  },\n\n  setup(props, ctx) {\n    const initialValues = toRef(props, 'initialValues');\n    const validationSchema = toRef(props, 'validationSchema');\n    const {\n      errors,\n      values,\n      meta,\n      isSubmitting,\n      submitCount,\n      validate,\n      validateField,\n      handleReset,\n      resetForm,\n      handleSubmit,\n      submitForm,\n      setErrors,\n      setFieldError,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched\n    } = useForm({\n      validationSchema: validationSchema.value ? validationSchema : undefined,\n      initialValues,\n      initialErrors: props.initialErrors,\n      initialTouched: props.initialTouched,\n      validateOnMount: props.validateOnMount\n    });\n    const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\n\n    function handleFormReset(e) {\n      if (isEvent(e)) {\n        // Prevent default form reset behavior\n        e.preventDefault();\n      }\n\n      handleReset();\n\n      if (typeof ctx.attrs.onReset === 'function') {\n        ctx.attrs.onReset();\n      }\n    }\n\n    function handleScopedSlotSubmit(evt, onSubmit) {\n      const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\n      return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\n    }\n\n    function slotProps() {\n      return {\n        meta: meta.value,\n        errors: errors.value,\n        values: values,\n        isSubmitting: isSubmitting.value,\n        submitCount: submitCount.value,\n        validate,\n        validateField,\n        handleSubmit: handleScopedSlotSubmit,\n        handleReset,\n        submitForm,\n        setErrors,\n        setFieldError,\n        setFieldValue,\n        setValues,\n        setFieldTouched,\n        setTouched,\n        resetForm\n      };\n    } // expose these functions and methods as part of public API\n\n\n    ctx.expose({\n      setFieldError,\n      setErrors,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched,\n      resetForm,\n      validate,\n      validateField\n    });\n    return function renderForm() {\n      // avoid resolving the form component as itself\n      const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\n      const children = normalizeChildren(tag, ctx, slotProps);\n\n      if (!props.as) {\n        return children;\n      } // Attributes to add on a native `form` tag\n\n\n      const formAttrs = props.as === 'form' ? {\n        // Disables native validation as vee-validate will handle it.\n        novalidate: true\n      } : {};\n      return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), {\n        onSubmit,\n        onReset: handleFormReset\n      }), children);\n    };\n  }\n\n});\nconst Form = FormImpl;\nlet FIELD_ARRAY_COUNTER = 0;\n\nfunction useFieldArray(arrayPath) {\n  const id = FIELD_ARRAY_COUNTER++;\n  const form = injectWithSelf(FormContextKey, undefined);\n  const fields = ref([]); // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n  const noOp = () => {};\n\n  const noOpApi = {\n    fields: readonly(fields),\n    remove: noOp,\n    push: noOp,\n    swap: noOp,\n    insert: noOp,\n    update: noOp,\n    replace: noOp,\n    prepend: noOp\n  };\n\n  if (!form) {\n    warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\n    return noOpApi;\n  }\n\n  if (!unref(arrayPath)) {\n    warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\n    return noOpApi;\n  }\n\n  let entryCounter = 0;\n\n  function initFields() {\n    const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []);\n    fields.value = currentValues.map(createEntry);\n    updateEntryFlags();\n  }\n\n  initFields();\n\n  function updateEntryFlags() {\n    const fieldsLength = fields.value.length;\n\n    for (let i = 0; i < fieldsLength; i++) {\n      const entry = fields.value[i];\n      entry.isFirst = i === 0;\n      entry.isLast = i === fieldsLength - 1;\n    }\n  }\n\n  function createEntry(value) {\n    const key = entryCounter++;\n    const entry = {\n      key,\n      value: computed(() => {\n        const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []);\n        const idx = fields.value.findIndex(e => e.key === key);\n        return idx === -1 ? value : currentValues[idx];\n      }),\n      isFirst: false,\n      isLast: false\n    };\n    return entry;\n  }\n\n  function remove(idx) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!pathValue || !Array.isArray(pathValue)) {\n      return;\n    }\n\n    const newValue = [...pathValue];\n    newValue.splice(idx, 1);\n    form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.splice(idx, 1);\n    updateEntryFlags();\n  }\n\n  function push(value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n\n    const newValue = [...normalizedPathValue];\n    newValue.push(value);\n    form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.push(createEntry(value));\n    updateEntryFlags();\n  }\n\n  function swap(indexA, indexB) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!Array.isArray(pathValue) || !pathValue[indexA] || !pathValue[indexB]) {\n      return;\n    }\n\n    const newValue = [...pathValue];\n    const newFields = [...fields.value]; // the old switcheroo\n\n    const temp = newValue[indexA];\n    newValue[indexA] = newValue[indexB];\n    newValue[indexB] = temp;\n    const tempEntry = newFields[indexA];\n    newFields[indexA] = newFields[indexB];\n    newFields[indexB] = tempEntry;\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n\n  function insert(idx, value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!Array.isArray(pathValue) || pathValue.length < idx) {\n      return;\n    }\n\n    const newValue = [...pathValue];\n    const newFields = [...fields.value];\n    newValue.splice(idx, 0, value);\n    newFields.splice(idx, 0, createEntry(value));\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n\n  function replace(arr) {\n    const pathName = unref(arrayPath);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\n    initFields();\n  }\n\n  function update(idx, value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\n      return;\n    }\n\n    form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\n  }\n\n  function prepend(value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n\n    const newValue = [value, ...normalizedPathValue];\n    form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.unshift(createEntry(value));\n    updateEntryFlags();\n  }\n\n  form.fieldArraysLookup[id] = {\n    reset: initFields\n  };\n  onBeforeUnmount(() => {\n    delete form.fieldArraysLookup[id];\n  });\n  return {\n    fields: readonly(fields),\n    remove,\n    push,\n    swap,\n    insert,\n    update,\n    replace,\n    prepend\n  };\n}\n\nconst FieldArrayImpl = defineComponent({\n  name: 'FieldArray',\n  inheritAttrs: false,\n  props: {\n    name: {\n      type: String,\n      required: true\n    }\n  },\n\n  setup(props, ctx) {\n    const {\n      push,\n      remove,\n      swap,\n      insert,\n      replace,\n      update,\n      prepend,\n      fields\n    } = useFieldArray(toRef(props, 'name'));\n\n    function slotProps() {\n      return {\n        fields: fields.value,\n        push,\n        remove,\n        swap,\n        insert,\n        update,\n        replace,\n        prepend\n      };\n    }\n\n    ctx.expose({\n      push,\n      remove,\n      swap,\n      insert,\n      update,\n      replace,\n      prepend\n    });\n    return () => {\n      const children = normalizeChildren(undefined, ctx, slotProps);\n      return children;\n    };\n  }\n\n});\nconst FieldArray = FieldArrayImpl;\nconst ErrorMessageImpl = defineComponent({\n  name: 'ErrorMessage',\n  props: {\n    as: {\n      type: String,\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    }\n  },\n\n  setup(props, ctx) {\n    const form = inject(FormContextKey, undefined);\n    const message = computed(() => {\n      return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\n    });\n\n    function slotProps() {\n      return {\n        message: message.value\n      };\n    }\n\n    return () => {\n      // Renders nothing if there are no messages\n      if (!message.value) {\n        return undefined;\n      }\n\n      const tag = props.as ? resolveDynamicComponent(props.as) : props.as;\n      const children = normalizeChildren(tag, ctx, slotProps);\n      const attrs = Object.assign({\n        role: 'alert'\n      }, ctx.attrs); // If no tag was specified and there are children\n      // render the slot as is without wrapping it\n\n      if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\n        return children;\n      } // If no children in slot\n      // render whatever specified and fallback to a <span> with the message in it's contents\n\n\n      if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\n        return h(tag || 'span', attrs, message.value);\n      }\n\n      return h(tag, attrs, children);\n    };\n  }\n\n});\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return function resetForm(state) {\n    if (!form) {\n      return;\n    }\n\n    return form.resetForm(state);\n  };\n}\n/**\r\n * If a field is dirty or not\r\n */\n\n\nfunction useIsFieldDirty(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n\n    return field.meta.dirty;\n  });\n}\n/**\r\n * If a field is touched or not\r\n */\n\n\nfunction useIsFieldTouched(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n\n    return field.meta.touched;\n  });\n}\n/**\r\n * If a field is validated and is valid\r\n */\n\n\nfunction useIsFieldValid(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n\n    return field.meta.valid;\n  });\n}\n/**\r\n * If the form is submitting or not\r\n */\n\n\nfunction useIsSubmitting() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * Validates a single field\r\n */\n\n\nfunction useValidateField(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return function validateField() {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return Promise.resolve({\n        errors: [],\n        valid: true\n      });\n    }\n\n    return field.validate();\n  };\n}\n/**\r\n * If the form is dirty or not\r\n */\n\n\nfunction useIsFormDirty() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * If the form is touched or not\r\n */\n\n\nfunction useIsFormTouched() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * If the form has been validated and is valid\r\n */\n\n\nfunction useIsFormValid() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * Validate multiple fields\r\n */\n\n\nfunction useValidateForm() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return function validateField() {\n    if (!form) {\n      return Promise.resolve({\n        results: {},\n        errors: {},\n        valid: true\n      });\n    }\n\n    return form.validate();\n  };\n}\n/**\r\n * The number of form's submission count\r\n */\n\n\nfunction useSubmitCount() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\n  });\n}\n/**\r\n * Gives access to a field's current value\r\n */\n\n\nfunction useFieldValue(path) {\n  const form = injectWithSelf(FormContextKey); // We don't want to use self injected context as it doesn't make sense\n\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\n    }\n\n    return unref(field === null || field === void 0 ? void 0 : field.value);\n  });\n}\n/**\r\n * Gives access to a form's values\r\n */\n\n\nfunction useFormValues() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.values) || {};\n  });\n}\n/**\r\n * Gives access to all form errors\r\n */\n\n\nfunction useFormErrors() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.errors.value) || {};\n  });\n}\n/**\r\n * Gives access to a single field error\r\n */\n\n\nfunction useFieldError(path) {\n  const form = injectWithSelf(FormContextKey); // We don't want to use self injected context as it doesn't make sense\n\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\n    }\n\n    return field === null || field === void 0 ? void 0 : field.errorMessage.value;\n  });\n}\n\nfunction useSubmitForm(cb) {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  const onSubmit = form ? form.handleSubmit(cb) : undefined;\n  return function submitForm(e) {\n    if (!onSubmit) {\n      return;\n    }\n\n    return onSubmit(e);\n  };\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate };","map":{"version":3,"sources":["C:/Users/JELOSKA ISABEL/Documents/wild-souls/Wild-Souls/node_modules/vee-validate/dist/vee-validate.esm.js"],"names":["inject","getCurrentInstance","warn","warn$1","ref","unref","computed","reactive","watch","onUnmounted","nextTick","onMounted","provide","isRef","onBeforeUnmount","defineComponent","toRef","resolveDynamicComponent","h","watchEffect","markRaw","readonly","setupDevtoolsPlugin","isCallable","fn","isNullOrUndefined","value","undefined","isObject","obj","Array","isArray","isIndex","Number","toNumber","n","parseFloat","isNaN","RULES","defineRule","id","validator","guardExtend","resolveRule","Error","FormContextKey","Symbol","FieldContextKey","IS_ABSENT","isLocator","__locatorRef","isHTMLTag","tag","includes","isFileInputNode","attrs","type","isYupValidator","validate","hasCheckedAttr","isContainerValue","isEmptyContainer","length","Object","keys","isNotNestedPath","path","test","isNativeMultiSelect","el","isNativeSelect","multiple","tagName","isNativeMultiSelectNode","hasTruthyBindingValue","shouldHaveValueBinding","isFormSubmitEvent","evt","isEvent","target","Event","srcElement","isPropPresent","prop","cleanupNonNestedPath","replace","getFromPath","object","fallback","resolvedValue","split","filter","Boolean","reduce","acc","propKey","setInPath","i","unset","key","splice","unsetPath","pathValues","map","_","idx","slice","join","keysOf","record","injectWithSelf","symbol","def","vm","provides","message","normalizeField","field","resolveNextCheckboxValue","currentValue","checkedValue","uncheckedValue","newVal","indexOf","push","throttle","func","limit","inThrottle","lastResult","args","context","setTimeout","apply","debounceAsync","inner","ms","timer","resolves","window","clearTimeout","result","forEach","r","Promise","resolve","normalizeChildren","slotProps","slots","default","_a","_b","call","getBoundValue","hasValueBinding","_value","normalizeEventValue","input","files","from","options","opt","selected","disabled","selectedOption","find","normalizeRules","rules","defineProperty","writable","enumerable","configurable","_$$isNormalized","prev","curr","params","normalizeParams","buildParams","rule","parsedRule","parseRule","name","provided","mapValueToLocator","createLocator","RegExp","locator","crossTable","val","extractLocators","DEFAULT_CONFIG","generateMessage","bails","validateOnBlur","validateOnChange","validateOnInput","validateOnModelUpdate","currentConfig","assign","getConfig","setConfig","newConf","configure","shouldBail","formData","values","_validate","errors","valid","validateFieldWithYup","ctx","form","isValid","_generateFieldError","normalizedContext","rulesKeys","_test","error","opts","abortEarly","then","catch","err","fillTargetValues","fieldCtx","normalize","param","validateYupSchema","schema","errorObjects","results","messages","validateObjectSchema","paths","validations","_c","fieldResult","names","bailsMap","isAllValid","validationResults","all","set","klona","get","x","k","list","tmp","str","prototype","toString","create","__proto__","Set","add","Map","Date","source","flags","constructor","buffer","getOwnPropertySymbols","getOwnPropertyDescriptor","getOwnPropertyNames","hasOwnProperty","es6","equal","a","b","size","entries","has","ArrayBuffer","isView","valueOf","ID_COUNTER","useFieldState","init","initialValue","setInitialValue","_useFieldValue","modelValue","standalone","errorMessage","setErrors","_useFieldErrors","meta","_useFieldMeta","MAX_SAFE_INTEGER","setState","state","touched","shouldInjectForm","modelRef","resolveInitialValue","initialValues","setFieldInitialValue","stageInitialValue","setFieldValue","pending","validated","dirty","immediate","flush","normalizeErrors","errorBag","setFieldErrorBag","installDevtoolsPlugin","app","process","env","NODE_ENV","label","packageName","homepage","logo","setupApiHooks","DEVTOOLS_FORMS","DEVTOOLS_FIELDS","API","refreshInspector","sendInspectorState","INSPECTOR_ID","sendInspectorTree","registerFormWithDevTools","appContext","formId","_vm","registerSingleFieldWithDevtools","COLORS","success","unknown","white","black","blue","purple","orange","gray","SELECTED_NODE","api","addInspector","icon","noSelectionText","actions","tooltip","action","console","log","resetField","resetForm","on","getInspectorTree","payload","inspectorId","forms","fields","rootNodes","mapFormForDevtoolsInspector","mapFieldForDevtoolsInspector","getInspectorState","currentTab","decodeNodeId","nodeId","buildFormState","buildFieldState","textColor","bgColor","getTagTheme","formTreeNodes","fieldsByPath","fieldInstance","buildFormTree","tree","pop","children","c","String","encodeNodeId","tags","backgroundColor","isGroup","fieldItem","encodeIndex","fieldPath","fieldGroup","idObject","f","ff","btoa","JSON","stringify","parse","atob","isSubmitting","submitCount","fieldOrForm","useField","useCheckboxField","_useField","validateOnMount","validateOnValueUpdate","normalizeOptions","handleBlur","normalizedRules","rulesValue","extractRuleFromSchema","validateCurrentValue","mode","validateSchema","validateWithStateMutation","validateValidStateOnly","validate$1","handleChange","e","shouldValidate","newValue","setTouched","isTouched","unwatchValue","watchValue","deep","setValue","handleReset","oldValue","register","unregister","dependencies","rulesVal","deps","dep","depAcc","depName","depValue","oldDeps","defaults","valueProp","fieldName","patchCheckboxApi","checked","checkedVal","handleCheckboxChange","FieldImpl","inheritAttrs","props","as","required","Function","modelModifiers","setup","hasModelEvents","validateField","onChangeHandler","handleChangeWithModel","emit","handleInput","onInputHandler","handleInputWithModel","fieldProps","resolveValidationTriggers","baseOnBlur","onBlur","baseOnInput","onInput","baseOnChange","onChange","resolveTag","newModelValue","applyModifiers","expose","reset","_d","modifiers","number","Field","FORM_COUNTER","useForm","RESET_LOCK","fieldArraysLookup","formValues","setErrorBag","useErrorBag","initialErrors","bag","getFirstFieldAtPath","fieldOrGroup","fieldExists","fieldNames","fieldBailsMap","originalInitialValues","setInitialValues","useFormInitialValues","useFormMeta","validationSchema","formCtx","registerField","unregisterField","setValues","setFieldError","setFieldTouched","handleSubmit","unsetInitialValue","isFieldGroup","applyFieldMutation","mutation","force","clonedValue","insertFieldAtPath","rawField","fieldAtPath","removeFieldFromPath","findIndex","newPath","oldPath","initialErrorMessage","validation","every","onValidationError","submissionHandler","preventDefault","stopPropagation","returnVal","_validateSchema","schemaValue","formResult","debouncedSchemaValidation","fieldsById","currentErrorsPaths","wasValidated","some","submitForm","submit","initialTouched","currentValues","MERGE_STRATEGIES","isDirty","calculateFlags","flat","flag","mergeMethod","providedValues","updateFields","wasTouched","normalizeErrorItem","FormImpl","onSubmit","onInvalidSubmit","handleFormReset","onReset","handleScopedSlotSubmit","onSuccess","renderForm","formAttrs","novalidate","Form","FIELD_ARRAY_COUNTER","useFieldArray","arrayPath","noOp","noOpApi","remove","swap","insert","update","prepend","entryCounter","initFields","createEntry","updateEntryFlags","fieldsLength","entry","isFirst","isLast","pathName","pathValue","normalizedPathValue","indexA","indexB","newFields","temp","tempEntry","arr","unshift","FieldArrayImpl","FieldArray","ErrorMessageImpl","role","ErrorMessage","useResetForm","useIsFieldDirty","useIsFieldTouched","useIsFieldValid","useIsSubmitting","useValidateField","useIsFormDirty","useIsFormTouched","useIsFormValid","useValidateForm","useSubmitCount","useFieldValue","useFormValues","useFormErrors","useFieldError","useSubmitForm","cb"],"mappings":"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","sourcesContent":["/**\n  * vee-validate v4.5.7\n  * (c) 2021 Abdelrahman Awad\n  * @license MIT\n  */\nimport { inject, getCurrentInstance, warn as warn$1, ref, unref, computed, reactive, watch, onUnmounted, nextTick, onMounted, provide, isRef, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw, readonly } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\r\n    return typeof fn === 'function';\r\n}\r\nfunction isNullOrUndefined(value) {\r\n    return value === null || value === undefined;\r\n}\r\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\r\nfunction isIndex(value) {\r\n    return Number(value) >= 0;\r\n}\r\nfunction toNumber(value) {\r\n    const n = parseFloat(value);\r\n    return isNaN(n) ? value : n;\r\n}\n\nconst RULES = {};\r\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\r\nfunction defineRule(id, validator) {\r\n    // makes sure new rules are properly formatted.\r\n    guardExtend(id, validator);\r\n    RULES[id] = validator;\r\n}\r\n/**\r\n * Gets an already defined rule\r\n */\r\nfunction resolveRule(id) {\r\n    return RULES[id];\r\n}\r\n/**\r\n * Guards from extension violations.\r\n */\r\nfunction guardExtend(id, validator) {\r\n    if (isCallable(validator)) {\r\n        return;\r\n    }\r\n    throw new Error(`Extension Error: The validator '${id}' must be a function.`);\r\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\r\nconst FieldContextKey = Symbol('vee-validate-field-instance');\r\nconst IS_ABSENT = Symbol('Default empty value');\n\nfunction isLocator(value) {\r\n    return isCallable(value) && !!value.__locatorRef;\r\n}\r\n/**\r\n * Checks if an tag name is a native HTML tag and not a Vue component\r\n */\r\nfunction isHTMLTag(tag) {\r\n    return ['input', 'textarea', 'select'].includes(tag);\r\n}\r\n/**\r\n * Checks if an input is of type file\r\n */\r\nfunction isFileInputNode(tag, attrs) {\r\n    return isHTMLTag(tag) && attrs.type === 'file';\r\n}\r\nfunction isYupValidator(value) {\r\n    return !!value && isCallable(value.validate);\r\n}\r\nfunction hasCheckedAttr(type) {\r\n    return type === 'checkbox' || type === 'radio';\r\n}\r\nfunction isContainerValue(value) {\r\n    return isObject(value) || Array.isArray(value);\r\n}\r\n/**\r\n * True if the value is an empty object or array\r\n */\r\nfunction isEmptyContainer(value) {\r\n    if (Array.isArray(value)) {\r\n        return value.length === 0;\r\n    }\r\n    return isObject(value) && Object.keys(value).length === 0;\r\n}\r\n/**\r\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\r\n */\r\nfunction isNotNestedPath(path) {\r\n    return /^\\[.+\\]$/i.test(path);\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 multi-select input element\r\n */\r\nfunction isNativeMultiSelect(el) {\r\n    return isNativeSelect(el) && el.multiple;\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 select input element\r\n */\r\nfunction isNativeSelect(el) {\r\n    return el.tagName === 'SELECT';\r\n}\r\n/**\r\n * Checks if a tag name with attrs object will render a native multi-select element\r\n */\r\nfunction isNativeMultiSelectNode(tag, attrs) {\r\n    // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\r\n    const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\r\n    return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\r\n}\r\n/**\r\n * Checks if a node should have a `:value` binding or not\r\n *\r\n * These nodes should not have a value binding\r\n * For files, because they are not reactive\r\n * For multi-selects because the value binding will reset the value\r\n */\r\nfunction shouldHaveValueBinding(tag, attrs) {\r\n    return isNativeMultiSelectNode(tag, attrs) || isFileInputNode(tag, attrs);\r\n}\r\nfunction isFormSubmitEvent(evt) {\r\n    return isEvent(evt) && evt.target && 'submit' in evt.target;\r\n}\r\nfunction isEvent(evt) {\r\n    if (!evt) {\r\n        return false;\r\n    }\r\n    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\r\n        return true;\r\n    }\r\n    // this is for IE and Cypress #3161\r\n    /* istanbul ignore next */\r\n    if (evt && evt.srcElement) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isPropPresent(obj, prop) {\r\n    return prop in obj && obj[prop] !== IS_ABSENT;\r\n}\n\nfunction cleanupNonNestedPath(path) {\r\n    if (isNotNestedPath(path)) {\r\n        return path.replace(/\\[|\\]/gi, '');\r\n    }\r\n    return path;\r\n}\r\nfunction getFromPath(object, path, fallback) {\r\n    if (!object) {\r\n        return fallback;\r\n    }\r\n    if (isNotNestedPath(path)) {\r\n        return object[cleanupNonNestedPath(path)];\r\n    }\r\n    const resolvedValue = (path || '')\r\n        .split(/\\.|\\[(\\d+)\\]/)\r\n        .filter(Boolean)\r\n        .reduce((acc, propKey) => {\r\n        if (isContainerValue(acc) && propKey in acc) {\r\n            return acc[propKey];\r\n        }\r\n        return fallback;\r\n    }, object);\r\n    return resolvedValue;\r\n}\r\n/**\r\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\r\n */\r\nfunction setInPath(object, path, value) {\r\n    if (isNotNestedPath(path)) {\r\n        object[cleanupNonNestedPath(path)] = value;\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, set it\r\n        if (i === keys.length - 1) {\r\n            acc[keys[i]] = value;\r\n            return;\r\n        }\r\n        // Key does not exist, create a container for it\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            // container can be either an object or an array depending on the next key if it exists\r\n            acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n}\r\nfunction unset(object, key) {\r\n    if (Array.isArray(object) && isIndex(key)) {\r\n        object.splice(Number(key), 1);\r\n        return;\r\n    }\r\n    if (isObject(object)) {\r\n        delete object[key];\r\n    }\r\n}\r\n/**\r\n * Removes a nested property from object\r\n */\r\nfunction unsetPath(object, path) {\r\n    if (isNotNestedPath(path)) {\r\n        delete object[cleanupNonNestedPath(path)];\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, unset it\r\n        if (i === keys.length - 1) {\r\n            unset(acc, keys[i]);\r\n            break;\r\n        }\r\n        // Key does not exist, exit\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            break;\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n    const pathValues = keys.map((_, idx) => {\r\n        return getFromPath(object, keys.slice(0, idx).join('.'));\r\n    });\r\n    for (let i = pathValues.length - 1; i >= 0; i--) {\r\n        if (!isEmptyContainer(pathValues[i])) {\r\n            continue;\r\n        }\r\n        if (i === 0) {\r\n            unset(object, keys[0]);\r\n            continue;\r\n        }\r\n        unset(pathValues[i - 1], keys[i - 1]);\r\n    }\r\n}\r\n/**\r\n * A typed version of Object.keys\r\n */\r\nfunction keysOf(record) {\r\n    return Object.keys(record);\r\n}\r\n// Uses same component provide as its own injections\r\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\r\nfunction injectWithSelf(symbol, def = undefined) {\r\n    const vm = getCurrentInstance();\r\n    return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\r\n}\r\nfunction warn(message) {\r\n    warn$1(`[vee-validate]: ${message}`);\r\n}\r\n/**\r\n * Ensures we deal with a singular field value\r\n */\r\nfunction normalizeField(field) {\r\n    if (Array.isArray(field)) {\r\n        return field[0];\r\n    }\r\n    return field;\r\n}\r\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\r\n    if (Array.isArray(currentValue)) {\r\n        const newVal = [...currentValue];\r\n        const idx = newVal.indexOf(checkedValue);\r\n        idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\r\n        return newVal;\r\n    }\r\n    return currentValue === checkedValue ? uncheckedValue : checkedValue;\r\n}\r\n/**\r\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\r\n * (`limit`)\r\n */\r\nfunction throttle(func, limit) {\r\n    let inThrottle;\r\n    let lastResult;\r\n    return function (...args) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const context = this;\r\n        if (!inThrottle) {\r\n            inThrottle = true;\r\n            setTimeout(() => (inThrottle = false), limit);\r\n            lastResult = func.apply(context, args);\r\n        }\r\n        return lastResult;\r\n    };\r\n}\r\nfunction debounceAsync(inner, ms = 0) {\r\n    let timer = null;\r\n    let resolves = [];\r\n    return function (...args) {\r\n        // Run the function after a certain amount of time\r\n        if (timer) {\r\n            window.clearTimeout(timer);\r\n        }\r\n        timer = window.setTimeout(() => {\r\n            // Get the result of the inner function, then apply it to the resolve function of\r\n            // each promise that has been created since the last time the inner function was run\r\n            const result = inner(...args);\r\n            resolves.forEach(r => r(result));\r\n            resolves = [];\r\n        }, ms);\r\n        return new Promise(resolve => resolves.push(resolve));\r\n    };\r\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst normalizeChildren = (tag, context, slotProps) => {\r\n    if (!context.slots.default) {\r\n        return context.slots.default;\r\n    }\r\n    if (typeof tag === 'string' || !tag) {\r\n        return context.slots.default(slotProps());\r\n    }\r\n    return {\r\n        default: () => { var _a, _b; return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps()); },\r\n    };\r\n};\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction getBoundValue(el) {\r\n    if (hasValueBinding(el)) {\r\n        return el._value;\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction hasValueBinding(el) {\r\n    return '_value' in el;\r\n}\n\nfunction normalizeEventValue(value) {\r\n    if (!isEvent(value)) {\r\n        return value;\r\n    }\r\n    const input = value.target;\r\n    // Vue sets the current bound value on `_value` prop\r\n    // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\r\n    if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\r\n        return getBoundValue(input);\r\n    }\r\n    if (input.type === 'file' && input.files) {\r\n        return Array.from(input.files);\r\n    }\r\n    if (isNativeMultiSelect(input)) {\r\n        return Array.from(input.options)\r\n            .filter(opt => opt.selected && !opt.disabled)\r\n            .map(getBoundValue);\r\n    }\r\n    // makes sure we get the actual `option` bound value\r\n    // #3440\r\n    if (isNativeSelect(input)) {\r\n        const selectedOption = Array.from(input.options).find(opt => opt.selected);\r\n        return selectedOption ? getBoundValue(selectedOption) : input.value;\r\n    }\r\n    return input.value;\r\n}\n\n/**\r\n * Normalizes the given rules expression.\r\n */\r\nfunction normalizeRules(rules) {\r\n    const acc = {};\r\n    Object.defineProperty(acc, '_$$isNormalized', {\r\n        value: true,\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: false,\r\n    });\r\n    if (!rules) {\r\n        return acc;\r\n    }\r\n    // Object is already normalized, skip.\r\n    if (isObject(rules) && rules._$$isNormalized) {\r\n        return rules;\r\n    }\r\n    if (isObject(rules)) {\r\n        return Object.keys(rules).reduce((prev, curr) => {\r\n            const params = normalizeParams(rules[curr]);\r\n            if (rules[curr] !== false) {\r\n                prev[curr] = buildParams(params);\r\n            }\r\n            return prev;\r\n        }, acc);\r\n    }\r\n    /* istanbul ignore if */\r\n    if (typeof rules !== 'string') {\r\n        return acc;\r\n    }\r\n    return rules.split('|').reduce((prev, rule) => {\r\n        const parsedRule = parseRule(rule);\r\n        if (!parsedRule.name) {\r\n            return prev;\r\n        }\r\n        prev[parsedRule.name] = buildParams(parsedRule.params);\r\n        return prev;\r\n    }, acc);\r\n}\r\n/**\r\n * Normalizes a rule param.\r\n */\r\nfunction normalizeParams(params) {\r\n    if (params === true) {\r\n        return [];\r\n    }\r\n    if (Array.isArray(params)) {\r\n        return params;\r\n    }\r\n    if (isObject(params)) {\r\n        return params;\r\n    }\r\n    return [params];\r\n}\r\nfunction buildParams(provided) {\r\n    const mapValueToLocator = (value) => {\r\n        // A target param using interpolation\r\n        if (typeof value === 'string' && value[0] === '@') {\r\n            return createLocator(value.slice(1));\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(provided)) {\r\n        return provided.map(mapValueToLocator);\r\n    }\r\n    // #3073\r\n    if (provided instanceof RegExp) {\r\n        return [provided];\r\n    }\r\n    return Object.keys(provided).reduce((prev, key) => {\r\n        prev[key] = mapValueToLocator(provided[key]);\r\n        return prev;\r\n    }, {});\r\n}\r\n/**\r\n * Parses a rule string expression.\r\n */\r\nconst parseRule = (rule) => {\r\n    let params = [];\r\n    const name = rule.split(':')[0];\r\n    if (rule.includes(':')) {\r\n        params = rule.split(':').slice(1).join(':').split(',');\r\n    }\r\n    return { name, params };\r\n};\r\nfunction createLocator(value) {\r\n    const locator = (crossTable) => {\r\n        const val = getFromPath(crossTable, value) || crossTable[value];\r\n        return val;\r\n    };\r\n    locator.__locatorRef = value;\r\n    return locator;\r\n}\r\nfunction extractLocators(params) {\r\n    if (Array.isArray(params)) {\r\n        return params.filter(isLocator);\r\n    }\r\n    return keysOf(params)\r\n        .filter(key => isLocator(params[key]))\r\n        .map(key => params[key]);\r\n}\n\nconst DEFAULT_CONFIG = {\r\n    generateMessage: ({ field }) => `${field} is not valid.`,\r\n    bails: true,\r\n    validateOnBlur: true,\r\n    validateOnChange: true,\r\n    validateOnInput: false,\r\n    validateOnModelUpdate: true,\r\n};\r\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\r\nconst getConfig = () => currentConfig;\r\nconst setConfig = (newConf) => {\r\n    currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\r\n};\r\nconst configure = setConfig;\n\n/**\r\n * Validates a value against the rules.\r\n */\r\nasync function validate(value, rules, options = {}) {\r\n    const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\r\n    const field = {\r\n        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\r\n        rules,\r\n        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\r\n        formData: (options === null || options === void 0 ? void 0 : options.values) || {},\r\n    };\r\n    const result = await _validate(field, value);\r\n    const errors = result.errors;\r\n    return {\r\n        errors,\r\n        valid: !errors.length,\r\n    };\r\n}\r\n/**\r\n * Starts the validation process.\r\n */\r\nasync function _validate(field, value) {\r\n    if (isYupValidator(field.rules)) {\r\n        return validateFieldWithYup(value, field.rules, { bails: field.bails });\r\n    }\r\n    // if a generic function, use it as the pipeline.\r\n    if (isCallable(field.rules)) {\r\n        const ctx = {\r\n            field: field.name,\r\n            form: field.formData,\r\n            value: value,\r\n        };\r\n        const result = await field.rules(value, ctx);\r\n        const isValid = typeof result !== 'string' && result;\r\n        const message = typeof result === 'string' ? result : _generateFieldError(ctx);\r\n        return {\r\n            errors: !isValid ? [message] : [],\r\n        };\r\n    }\r\n    const normalizedContext = Object.assign(Object.assign({}, field), { rules: normalizeRules(field.rules) });\r\n    const errors = [];\r\n    const rulesKeys = Object.keys(normalizedContext.rules);\r\n    const length = rulesKeys.length;\r\n    for (let i = 0; i < length; i++) {\r\n        const rule = rulesKeys[i];\r\n        const result = await _test(normalizedContext, value, {\r\n            name: rule,\r\n            params: normalizedContext.rules[rule],\r\n        });\r\n        if (result.error) {\r\n            errors.push(result.error);\r\n            if (field.bails) {\r\n                return {\r\n                    errors,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Handles yup validation\r\n */\r\nasync function validateFieldWithYup(value, validator, opts) {\r\n    var _a;\r\n    const errors = await validator\r\n        .validate(value, {\r\n        abortEarly: (_a = opts.bails) !== null && _a !== void 0 ? _a : true,\r\n    })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name === 'ValidationError') {\r\n            return err.errors;\r\n        }\r\n        // re-throw the error so we don't hide it\r\n        throw err;\r\n    });\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Tests a single input value against a rule.\r\n */\r\nasync function _test(field, value, rule) {\r\n    const validator = resolveRule(rule.name);\r\n    if (!validator) {\r\n        throw new Error(`No such validator '${rule.name}' exists.`);\r\n    }\r\n    const params = fillTargetValues(rule.params, field.formData);\r\n    const ctx = {\r\n        field: field.name,\r\n        value,\r\n        form: field.formData,\r\n        rule: Object.assign(Object.assign({}, rule), { params }),\r\n    };\r\n    const result = await validator(value, params, ctx);\r\n    if (typeof result === 'string') {\r\n        return {\r\n            error: result,\r\n        };\r\n    }\r\n    return {\r\n        error: result ? undefined : _generateFieldError(ctx),\r\n    };\r\n}\r\n/**\r\n * Generates error messages.\r\n */\r\nfunction _generateFieldError(fieldCtx) {\r\n    const message = getConfig().generateMessage;\r\n    if (!message) {\r\n        return 'Field is invalid';\r\n    }\r\n    return message(fieldCtx);\r\n}\r\nfunction fillTargetValues(params, crossTable) {\r\n    const normalize = (value) => {\r\n        if (isLocator(value)) {\r\n            return value(crossTable);\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(params)) {\r\n        return params.map(normalize);\r\n    }\r\n    return Object.keys(params).reduce((acc, param) => {\r\n        acc[param] = normalize(params[param]);\r\n        return acc;\r\n    }, {});\r\n}\r\nasync function validateYupSchema(schema, values) {\r\n    const errorObjects = await schema\r\n        .validate(values, { abortEarly: false })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name !== 'ValidationError') {\r\n            throw err;\r\n        }\r\n        // list of aggregated errors\r\n        return err.inner || [];\r\n    });\r\n    const results = {};\r\n    const errors = {};\r\n    for (const error of errorObjects) {\r\n        const messages = error.errors;\r\n        results[error.path] = { valid: !messages.length, errors: messages };\r\n        if (messages.length) {\r\n            errors[error.path] = messages[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: !errorObjects.length,\r\n        results,\r\n        errors,\r\n    };\r\n}\r\nasync function validateObjectSchema(schema, values, opts) {\r\n    const paths = keysOf(schema);\r\n    const validations = paths.map(async (path) => {\r\n        var _a, _b, _c;\r\n        const fieldResult = await validate(getFromPath(values, path), schema[path], {\r\n            name: ((_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path]) || path,\r\n            values: values,\r\n            bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true,\r\n        });\r\n        return Object.assign(Object.assign({}, fieldResult), { path });\r\n    });\r\n    let isAllValid = true;\r\n    const validationResults = await Promise.all(validations);\r\n    const results = {};\r\n    const errors = {};\r\n    for (const result of validationResults) {\r\n        results[result.path] = {\r\n            valid: result.valid,\r\n            errors: result.errors,\r\n        };\r\n        if (!result.valid) {\r\n            isAllValid = false;\r\n            errors[result.path] = result.errors[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: isAllValid,\r\n        results,\r\n        errors,\r\n    };\r\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nvar es6 = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n    if ((a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      for (i of a.entries())\n        if (!equal(i[1], b.get(i[0]))) return false;\n      return true;\n    }\n\n    if ((a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\nlet ID_COUNTER = 0;\r\nfunction useFieldState(path, init) {\r\n    const { value, initialValue, setInitialValue } = _useFieldValue(path, init.modelValue, !init.standalone);\r\n    const { errorMessage, errors, setErrors } = _useFieldErrors(path, !init.standalone);\r\n    const meta = _useFieldMeta(value, initialValue, errors);\r\n    const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\r\n    function setState(state) {\r\n        var _a;\r\n        if ('value' in state) {\r\n            value.value = state.value;\r\n        }\r\n        if ('errors' in state) {\r\n            setErrors(state.errors);\r\n        }\r\n        if ('touched' in state) {\r\n            meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\r\n        }\r\n        if ('initialValue' in state) {\r\n            setInitialValue(state.initialValue);\r\n        }\r\n    }\r\n    return {\r\n        id,\r\n        path,\r\n        value,\r\n        initialValue,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        setState,\r\n    };\r\n}\r\n/**\r\n * Creates the field value and resolves the initial value\r\n */\r\nfunction _useFieldValue(path, modelValue, shouldInjectForm) {\r\n    const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\r\n    const modelRef = ref(unref(modelValue));\r\n    function resolveInitialValue() {\r\n        if (!form) {\r\n            return unref(modelRef);\r\n        }\r\n        return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\r\n    }\r\n    function setInitialValue(value) {\r\n        if (!form) {\r\n            modelRef.value = value;\r\n            return;\r\n        }\r\n        form.setFieldInitialValue(unref(path), value);\r\n    }\r\n    const initialValue = computed(resolveInitialValue);\r\n    // if no form is associated, use a regular ref.\r\n    if (!form) {\r\n        const value = ref(resolveInitialValue());\r\n        return {\r\n            value,\r\n            initialValue,\r\n            setInitialValue,\r\n        };\r\n    }\r\n    // to set the initial value, first check if there is a current value, if there is then use it.\r\n    // otherwise use the configured initial value if it exists.\r\n    // prioritize model value over form values\r\n    // #3429\r\n    const currentValue = modelValue ? unref(modelValue) : getFromPath(form.values, unref(path), unref(initialValue));\r\n    form.stageInitialValue(unref(path), currentValue);\r\n    // otherwise use a computed setter that triggers the `setFieldValue`\r\n    const value = computed({\r\n        get() {\r\n            return getFromPath(form.values, unref(path));\r\n        },\r\n        set(newVal) {\r\n            form.setFieldValue(unref(path), newVal);\r\n        },\r\n    });\r\n    return {\r\n        value,\r\n        initialValue,\r\n        setInitialValue,\r\n    };\r\n}\r\n/**\r\n * Creates meta flags state and some associated effects with them\r\n */\r\nfunction _useFieldMeta(currentValue, initialValue, errors) {\r\n    const meta = reactive({\r\n        touched: false,\r\n        pending: false,\r\n        valid: true,\r\n        validated: !!unref(errors).length,\r\n        initialValue: computed(() => unref(initialValue)),\r\n        dirty: computed(() => {\r\n            return !es6(unref(currentValue), unref(initialValue));\r\n        }),\r\n    });\r\n    watch(errors, value => {\r\n        meta.valid = !value.length;\r\n    }, {\r\n        immediate: true,\r\n        flush: 'sync',\r\n    });\r\n    return meta;\r\n}\r\n/**\r\n * Creates the error message state for the field state\r\n */\r\nfunction _useFieldErrors(path, shouldInjectForm) {\r\n    const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\r\n    function normalizeErrors(messages) {\r\n        if (!messages) {\r\n            return [];\r\n        }\r\n        return Array.isArray(messages) ? messages : [messages];\r\n    }\r\n    if (!form) {\r\n        const errors = ref([]);\r\n        return {\r\n            errors,\r\n            errorMessage: computed(() => errors.value[0]),\r\n            setErrors: (messages) => {\r\n                errors.value = normalizeErrors(messages);\r\n            },\r\n        };\r\n    }\r\n    const errors = computed(() => form.errorBag.value[unref(path)] || []);\r\n    return {\r\n        errors,\r\n        errorMessage: computed(() => errors.value[0]),\r\n        setErrors: (messages) => {\r\n            form.setFieldErrorBag(unref(path), normalizeErrors(messages));\r\n        },\r\n    };\r\n}\n\nfunction installDevtoolsPlugin(app) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        setupDevtoolsPlugin({\r\n            id: 'vee-validate-devtools-plugin',\r\n            label: 'VeeValidate Plugin',\r\n            packageName: 'vee-validate',\r\n            homepage: 'https://vee-validate.logaretm.com/v4',\r\n            app,\r\n            logo: 'https://vee-validate.logaretm.com/v4/logo.png',\r\n        }, setupApiHooks);\r\n    }\r\n}\r\nconst DEVTOOLS_FORMS = {};\r\nconst DEVTOOLS_FIELDS = {};\r\nlet API;\r\nconst refreshInspector = throttle(() => {\r\n    setTimeout(async () => {\r\n        await nextTick();\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\r\n    }, 100);\r\n}, 100);\r\nfunction registerFormWithDevTools(form) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\r\n    DEVTOOLS_FORMS[form.formId]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FORMS[form.formId];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nfunction registerSingleFieldWithDevtools(field) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\r\n    DEVTOOLS_FIELDS[field.id]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FIELDS[field.id];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nconst INSPECTOR_ID = 'vee-validate-inspector';\r\nconst COLORS = {\r\n    error: 0xbd4b4b,\r\n    success: 0x06d77b,\r\n    unknown: 0x54436b,\r\n    white: 0xffffff,\r\n    black: 0x000000,\r\n    blue: 0x035397,\r\n    purple: 0xb980f0,\r\n    orange: 0xf5a962,\r\n    gray: 0xbbbfca,\r\n};\r\nlet SELECTED_NODE = null;\r\nfunction setupApiHooks(api) {\r\n    API = api;\r\n    api.addInspector({\r\n        id: INSPECTOR_ID,\r\n        icon: 'rule',\r\n        label: 'vee-validate',\r\n        noSelectionText: 'Select a vee-validate node to inspect',\r\n        actions: [\r\n            {\r\n                icon: 'done_outline',\r\n                tooltip: 'Validate selected item',\r\n                action: async () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    const result = await SELECTED_NODE.validate();\r\n                    console.log(result);\r\n                },\r\n            },\r\n            {\r\n                icon: 'delete_sweep',\r\n                tooltip: 'Clear validation state of the selected item',\r\n                action: () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    if ('id' in SELECTED_NODE) {\r\n                        SELECTED_NODE.resetField();\r\n                        return;\r\n                    }\r\n                    SELECTED_NODE.resetForm();\r\n                },\r\n            },\r\n        ],\r\n    });\r\n    api.on.getInspectorTree(payload => {\r\n        if (payload.inspectorId !== INSPECTOR_ID) {\r\n            return;\r\n        }\r\n        const forms = Object.values(DEVTOOLS_FORMS);\r\n        const fields = Object.values(DEVTOOLS_FIELDS);\r\n        payload.rootNodes = [\r\n            ...forms.map(mapFormForDevtoolsInspector),\r\n            ...fields.map(field => mapFieldForDevtoolsInspector(field)),\r\n        ];\r\n    });\r\n    api.on.getInspectorState((payload, ctx) => {\r\n        if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\r\n            return;\r\n        }\r\n        const { form, field, type } = decodeNodeId(payload.nodeId);\r\n        if (form && type === 'form') {\r\n            payload.state = buildFormState(form);\r\n            SELECTED_NODE = form;\r\n            return;\r\n        }\r\n        if (field && type === 'field') {\r\n            payload.state = buildFieldState(field);\r\n            SELECTED_NODE = field;\r\n            return;\r\n        }\r\n        SELECTED_NODE = null;\r\n    });\r\n}\r\nfunction mapFormForDevtoolsInspector(form) {\r\n    const { textColor, bgColor } = getTagTheme(form);\r\n    const formTreeNodes = {};\r\n    Object.values(form.fieldsByPath.value).forEach(field => {\r\n        const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n        if (!fieldInstance) {\r\n            return;\r\n        }\r\n        setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\r\n    });\r\n    function buildFormTree(tree, path = []) {\r\n        const key = [...path].pop();\r\n        if ('id' in tree) {\r\n            return Object.assign(Object.assign({}, tree), { label: key || tree.label });\r\n        }\r\n        if (isObject(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: key || '',\r\n                children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key])),\r\n            };\r\n        }\r\n        if (Array.isArray(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: `${key}[]`,\r\n                children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)])),\r\n            };\r\n        }\r\n        return { id: '', label: '', children: [] };\r\n    }\r\n    const { children } = buildFormTree(formTreeNodes);\r\n    return {\r\n        id: encodeNodeId(form),\r\n        label: 'Form',\r\n        children,\r\n        tags: [\r\n            {\r\n                label: 'Form',\r\n                textColor,\r\n                backgroundColor: bgColor,\r\n            },\r\n            {\r\n                label: `${Object.keys(form.fieldsByPath.value).length} fields`,\r\n                textColor: COLORS.white,\r\n                backgroundColor: COLORS.unknown,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction mapFieldForDevtoolsInspector(field, form) {\r\n    const fieldInstance = normalizeField(field);\r\n    const { textColor, bgColor } = getTagTheme(fieldInstance);\r\n    const isGroup = Array.isArray(field) && field.length > 1;\r\n    return {\r\n        id: encodeNodeId(form, fieldInstance, !isGroup),\r\n        label: unref(fieldInstance.name),\r\n        children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\r\n        tags: [\r\n            isGroup\r\n                ? undefined\r\n                : {\r\n                    label: 'Field',\r\n                    textColor,\r\n                    backgroundColor: bgColor,\r\n                },\r\n            !form\r\n                ? {\r\n                    label: 'Standalone',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.gray,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'checkbox'\r\n                ? {\r\n                    label: 'Checkbox',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.blue,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'radio'\r\n                ? {\r\n                    label: 'Radio',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.purple,\r\n                }\r\n                : undefined,\r\n            isGroup\r\n                ? {\r\n                    label: 'Group',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.orange,\r\n                }\r\n                : undefined,\r\n        ].filter(Boolean),\r\n    };\r\n}\r\nfunction encodeNodeId(form, field, encodeIndex = true) {\r\n    const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\r\n    const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\r\n    let idx;\r\n    if (encodeIndex && field && Array.isArray(fieldGroup)) {\r\n        idx = fieldGroup.indexOf(field);\r\n    }\r\n    const idObject = { f: form === null || form === void 0 ? void 0 : form.formId, ff: fieldPath, idx, type: field ? 'field' : 'form' };\r\n    return btoa(JSON.stringify(idObject));\r\n}\r\nfunction decodeNodeId(nodeId) {\r\n    try {\r\n        const idObject = JSON.parse(atob(nodeId));\r\n        const form = DEVTOOLS_FORMS[idObject.f];\r\n        if (!form && idObject.ff) {\r\n            const field = DEVTOOLS_FIELDS[idObject.ff];\r\n            if (!field) {\r\n                return {};\r\n            }\r\n            return {\r\n                type: idObject.type,\r\n                field,\r\n            };\r\n        }\r\n        if (!form) {\r\n            return {};\r\n        }\r\n        const fieldGroup = form.fieldsByPath.value[idObject.ff];\r\n        return {\r\n            type: idObject.type,\r\n            form,\r\n            field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup,\r\n        };\r\n    }\r\n    catch (err) {\r\n        // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\r\n    }\r\n    return {};\r\n}\r\nfunction buildFieldState(field) {\r\n    const { errors, meta, value } = field;\r\n    return {\r\n        'Field state': [\r\n            { key: 'errors', value: errors.value },\r\n            {\r\n                key: 'initialValue',\r\n                value: meta.initialValue,\r\n            },\r\n            {\r\n                key: 'currentValue',\r\n                value: value.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.valid,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction buildFormState(form) {\r\n    const { errorBag, meta, values, isSubmitting, submitCount } = form;\r\n    return {\r\n        'Form state': [\r\n            {\r\n                key: 'submitCount',\r\n                value: submitCount.value,\r\n            },\r\n            {\r\n                key: 'isSubmitting',\r\n                value: isSubmitting.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.value.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.value.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.value.valid,\r\n            },\r\n            {\r\n                key: 'initialValues',\r\n                value: meta.value.initialValues,\r\n            },\r\n            {\r\n                key: 'currentValues',\r\n                value: values,\r\n            },\r\n            {\r\n                key: 'errors',\r\n                value: keysOf(errorBag.value).reduce((acc, key) => {\r\n                    var _a;\r\n                    const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\r\n                    if (message) {\r\n                        acc[key] = message;\r\n                    }\r\n                    return acc;\r\n                }, {}),\r\n            },\r\n        ],\r\n    };\r\n}\r\n/**\r\n * Resolves the tag color based on the form state\r\n */\r\nfunction getTagTheme(fieldOrForm) {\r\n    // const fallbackColors = {\r\n    //   bgColor: COLORS.unknown,\r\n    //   textColor: COLORS.white,\r\n    // };\r\n    const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\r\n    return {\r\n        bgColor: isValid ? COLORS.success : COLORS.error,\r\n        textColor: isValid ? COLORS.black : COLORS.white,\r\n    };\r\n}\n\n/**\r\n * Creates a field composite.\r\n */\r\nfunction useField(name, rules, opts) {\r\n    if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\r\n        return useCheckboxField(name, rules, opts);\r\n    }\r\n    return _useField(name, rules, opts);\r\n}\r\nfunction _useField(name, rules, opts) {\r\n    const { initialValue: modelValue, validateOnMount, bails, type, checkedValue, label, validateOnValueUpdate, uncheckedValue, standalone, } = normalizeOptions(unref(name), opts);\r\n    const form = !standalone ? injectWithSelf(FormContextKey) : undefined;\r\n    const { id, value, initialValue, meta, setState, errors, errorMessage } = useFieldState(name, {\r\n        modelValue,\r\n        standalone,\r\n    });\r\n    /**\r\n     * Handles common onBlur meta update\r\n     */\r\n    const handleBlur = () => {\r\n        meta.touched = true;\r\n    };\r\n    const normalizedRules = computed(() => {\r\n        let rulesValue = unref(rules);\r\n        const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\r\n        if (schema && !isYupValidator(schema)) {\r\n            rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\r\n        }\r\n        if (isYupValidator(rulesValue) || isCallable(rulesValue)) {\r\n            return rulesValue;\r\n        }\r\n        return normalizeRules(rulesValue);\r\n    });\r\n    async function validateCurrentValue(mode) {\r\n        var _a, _b;\r\n        if (form === null || form === void 0 ? void 0 : form.validateSchema) {\r\n            return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : { valid: true, errors: [] };\r\n        }\r\n        return validate(value.value, normalizedRules.value, {\r\n            name: unref(label) || unref(name),\r\n            values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\r\n            bails,\r\n        });\r\n    }\r\n    async function validateWithStateMutation() {\r\n        meta.pending = true;\r\n        meta.validated = true;\r\n        const result = await validateCurrentValue('validated-only');\r\n        setState({ errors: result.errors });\r\n        meta.pending = false;\r\n        return result;\r\n    }\r\n    async function validateValidStateOnly() {\r\n        const result = await validateCurrentValue('silent');\r\n        meta.valid = result.valid;\r\n        return result;\r\n    }\r\n    function validate$1(opts) {\r\n        if (!(opts === null || opts === void 0 ? void 0 : opts.mode) || (opts === null || opts === void 0 ? void 0 : opts.mode) === 'force') {\r\n            return validateWithStateMutation();\r\n        }\r\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'validated-only') {\r\n            return validateWithStateMutation();\r\n        }\r\n        return validateValidStateOnly();\r\n    }\r\n    // Common input/change event handler\r\n    const handleChange = (e, shouldValidate = true) => {\r\n        const newValue = normalizeEventValue(e);\r\n        value.value = newValue;\r\n        if (!validateOnValueUpdate && shouldValidate) {\r\n            validateWithStateMutation();\r\n        }\r\n    };\r\n    // Runs the initial validation\r\n    onMounted(() => {\r\n        if (validateOnMount) {\r\n            return validateWithStateMutation();\r\n        }\r\n        // validate self initially if no form was handling this\r\n        // forms should have their own initial silent validation run to make things more efficient\r\n        if (!form || !form.validateSchema) {\r\n            validateValidStateOnly();\r\n        }\r\n    });\r\n    function setTouched(isTouched) {\r\n        meta.touched = isTouched;\r\n    }\r\n    let unwatchValue;\r\n    function watchValue() {\r\n        unwatchValue = watch(value, validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly, {\r\n            deep: true,\r\n        });\r\n    }\r\n    watchValue();\r\n    function resetField(state) {\r\n        var _a;\r\n        unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\r\n        const newValue = state && 'value' in state ? state.value : initialValue.value;\r\n        setState({\r\n            value: klona(newValue),\r\n            initialValue: klona(newValue),\r\n            touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\r\n            errors: (state === null || state === void 0 ? void 0 : state.errors) || [],\r\n        });\r\n        meta.pending = false;\r\n        meta.validated = false;\r\n        validateValidStateOnly();\r\n        // need to watch at next tick to avoid triggering the value watcher\r\n        nextTick(() => {\r\n            watchValue();\r\n        });\r\n    }\r\n    function setValue(newValue) {\r\n        value.value = newValue;\r\n    }\r\n    function setErrors(errors) {\r\n        setState({ errors: Array.isArray(errors) ? errors : [errors] });\r\n    }\r\n    const field = {\r\n        id,\r\n        name,\r\n        label,\r\n        value,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        type,\r\n        checkedValue,\r\n        uncheckedValue,\r\n        bails,\r\n        resetField,\r\n        handleReset: () => resetField(),\r\n        validate: validate$1,\r\n        handleChange,\r\n        handleBlur,\r\n        setState,\r\n        setTouched,\r\n        setErrors,\r\n        setValue,\r\n    };\r\n    provide(FieldContextKey, field);\r\n    if (isRef(rules) && typeof unref(rules) !== 'function') {\r\n        watch(rules, (value, oldValue) => {\r\n            if (es6(value, oldValue)) {\r\n                return;\r\n            }\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        field._vm = getCurrentInstance();\r\n        watch(() => (Object.assign(Object.assign({ errors: errors.value }, meta), { value: value.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n        if (!form) {\r\n            registerSingleFieldWithDevtools(field);\r\n        }\r\n    }\r\n    // if no associated form return the field API immediately\r\n    if (!form) {\r\n        return field;\r\n    }\r\n    // associate the field with the given form\r\n    form.register(field);\r\n    onBeforeUnmount(() => {\r\n        form.unregister(field);\r\n    });\r\n    // extract cross-field dependencies in a computed prop\r\n    const dependencies = computed(() => {\r\n        const rulesVal = normalizedRules.value;\r\n        // is falsy, a function schema or a yup schema\r\n        if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal)) {\r\n            return {};\r\n        }\r\n        return Object.keys(rulesVal).reduce((acc, rule) => {\r\n            const deps = extractLocators(rulesVal[rule])\r\n                .map((dep) => dep.__locatorRef)\r\n                .reduce((depAcc, depName) => {\r\n                const depValue = getFromPath(form.values, depName) || form.values[depName];\r\n                if (depValue !== undefined) {\r\n                    depAcc[depName] = depValue;\r\n                }\r\n                return depAcc;\r\n            }, {});\r\n            Object.assign(acc, deps);\r\n            return acc;\r\n        }, {});\r\n    });\r\n    // Adds a watcher that runs the validation whenever field dependencies change\r\n    watch(dependencies, (deps, oldDeps) => {\r\n        // Skip if no dependencies or if the field wasn't manipulated\r\n        if (!Object.keys(deps).length) {\r\n            return;\r\n        }\r\n        const shouldValidate = !es6(deps, oldDeps);\r\n        if (shouldValidate) {\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }\r\n    });\r\n    return field;\r\n}\r\n/**\r\n * Normalizes partial field options to include the full options\r\n */\r\nfunction normalizeOptions(name, opts) {\r\n    const defaults = () => ({\r\n        initialValue: undefined,\r\n        validateOnMount: false,\r\n        bails: true,\r\n        rules: '',\r\n        label: name,\r\n        validateOnValueUpdate: true,\r\n        standalone: false,\r\n    });\r\n    if (!opts) {\r\n        return defaults();\r\n    }\r\n    // TODO: Deprecate this in next major release\r\n    const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\r\n    return Object.assign(Object.assign(Object.assign({}, defaults()), (opts || {})), { checkedValue });\r\n}\r\n/**\r\n * Extracts the validation rules from a schema\r\n */\r\nfunction extractRuleFromSchema(schema, fieldName) {\r\n    // no schema at all\r\n    if (!schema) {\r\n        return undefined;\r\n    }\r\n    // there is a key on the schema object for this field\r\n    return schema[fieldName];\r\n}\r\nfunction useCheckboxField(name, rules, opts) {\r\n    const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\r\n    const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\r\n    const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\r\n    function patchCheckboxApi(field) {\r\n        const handleChange = field.handleChange;\r\n        const checked = computed(() => {\r\n            const currentValue = unref(field.value);\r\n            const checkedVal = unref(checkedValue);\r\n            return Array.isArray(currentValue) ? currentValue.includes(checkedVal) : checkedVal === currentValue;\r\n        });\r\n        function handleCheckboxChange(e, shouldValidate = true) {\r\n            var _a, _b;\r\n            if (checked.value === ((_b = (_a = e) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.checked)) {\r\n                return;\r\n            }\r\n            let newValue = normalizeEventValue(e);\r\n            // Single checkbox field without a form to toggle it's value\r\n            if (!form) {\r\n                newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\r\n            }\r\n            handleChange(newValue, shouldValidate);\r\n        }\r\n        onBeforeUnmount(() => {\r\n            // toggles the checkbox value if it was checked\r\n            if (checked.value) {\r\n                handleCheckboxChange(unref(checkedValue), false);\r\n            }\r\n        });\r\n        return Object.assign(Object.assign({}, field), { checked,\r\n            checkedValue,\r\n            uncheckedValue, handleChange: handleCheckboxChange });\r\n    }\r\n    return patchCheckboxApi(_useField(name, rules, opts));\r\n}\n\nconst FieldImpl = defineComponent({\r\n    name: 'Field',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: [String, Object],\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        rules: {\r\n            type: [Object, String, Function],\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        validateOnBlur: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnChange: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnInput: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnModelUpdate: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        bails: {\r\n            type: Boolean,\r\n            default: () => getConfig().bails,\r\n        },\r\n        label: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        uncheckedValue: {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        modelValue: {\r\n            type: null,\r\n            default: IS_ABSENT,\r\n        },\r\n        modelModifiers: {\r\n            type: null,\r\n            default: () => ({}),\r\n        },\r\n        'onUpdate:modelValue': {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        standalone: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const rules = toRef(props, 'rules');\r\n        const name = toRef(props, 'name');\r\n        const label = toRef(props, 'label');\r\n        const uncheckedValue = toRef(props, 'uncheckedValue');\r\n        const hasModelEvents = isPropPresent(props, 'onUpdate:modelValue');\r\n        const { errors, value, errorMessage, validate: validateField, handleChange, handleBlur, setTouched, resetField, handleReset, meta, checked, setErrors, } = useField(name, rules, {\r\n            validateOnMount: props.validateOnMount,\r\n            bails: props.bails,\r\n            standalone: props.standalone,\r\n            type: ctx.attrs.type,\r\n            initialValue: resolveInitialValue(props, ctx),\r\n            // Only for checkboxes and radio buttons\r\n            checkedValue: ctx.attrs.value,\r\n            uncheckedValue,\r\n            label,\r\n            validateOnValueUpdate: false,\r\n        });\r\n        // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\r\n        const onChangeHandler = hasModelEvents\r\n            ? function handleChangeWithModel(e, shouldValidate = true) {\r\n                handleChange(e, shouldValidate);\r\n                ctx.emit('update:modelValue', value.value);\r\n            }\r\n            : handleChange;\r\n        const handleInput = (e) => {\r\n            if (!hasCheckedAttr(ctx.attrs.type)) {\r\n                value.value = normalizeEventValue(e);\r\n            }\r\n        };\r\n        const onInputHandler = hasModelEvents\r\n            ? function handleInputWithModel(e) {\r\n                handleInput(e);\r\n                ctx.emit('update:modelValue', value.value);\r\n            }\r\n            : handleInput;\r\n        const fieldProps = computed(() => {\r\n            const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = resolveValidationTriggers(props);\r\n            const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\r\n            const baseOnInput = [(e) => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\r\n            const baseOnChange = [(e) => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\r\n            const attrs = {\r\n                name: props.name,\r\n                onBlur: baseOnBlur,\r\n                onInput: baseOnInput,\r\n                onChange: baseOnChange,\r\n            };\r\n            attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\r\n            if (hasCheckedAttr(ctx.attrs.type) && checked) {\r\n                attrs.checked = checked.value;\r\n            }\r\n            else {\r\n                attrs.value = value.value;\r\n            }\r\n            const tag = resolveTag(props, ctx);\r\n            if (shouldHaveValueBinding(tag, ctx.attrs)) {\r\n                delete attrs.value;\r\n            }\r\n            return attrs;\r\n        });\r\n        const modelValue = toRef(props, 'modelValue');\r\n        watch(modelValue, newModelValue => {\r\n            // Don't attempt to sync absent values\r\n            if (newModelValue === IS_ABSENT && value.value === undefined) {\r\n                return;\r\n            }\r\n            if (newModelValue !== applyModifiers(value.value, props.modelModifiers)) {\r\n                value.value = newModelValue === IS_ABSENT ? undefined : newModelValue;\r\n                validateField();\r\n            }\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                field: fieldProps.value,\r\n                value: value.value,\r\n                meta,\r\n                errors: errors.value,\r\n                errorMessage: errorMessage.value,\r\n                validate: validateField,\r\n                resetField,\r\n                handleChange: onChangeHandler,\r\n                handleInput: onInputHandler,\r\n                handleReset,\r\n                handleBlur,\r\n                setTouched,\r\n                setErrors,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            setErrors,\r\n            setTouched,\r\n            reset: resetField,\r\n            validate: validateField,\r\n            handleChange,\r\n        });\r\n        return () => {\r\n            const tag = resolveDynamicComponent(resolveTag(props, ctx));\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (tag) {\r\n                return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\r\n            }\r\n            return children;\r\n        };\r\n    },\r\n});\r\nfunction resolveTag(props, ctx) {\r\n    let tag = props.as || '';\r\n    if (!props.as && !ctx.slots.default) {\r\n        tag = 'input';\r\n    }\r\n    return tag;\r\n}\r\nfunction resolveValidationTriggers(props) {\r\n    var _a, _b, _c, _d;\r\n    const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = getConfig();\r\n    return {\r\n        validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\r\n        validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\r\n        validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\r\n        validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate,\r\n    };\r\n}\r\nfunction applyModifiers(value, modifiers) {\r\n    if (modifiers.number) {\r\n        return toNumber(value);\r\n    }\r\n    return value;\r\n}\r\nfunction resolveInitialValue(props, ctx) {\r\n    // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\r\n    // For checkboxes and radio buttons it will always be the model value not the `value` attribute\r\n    if (!hasCheckedAttr(ctx.attrs.type)) {\r\n        return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\r\n    }\r\n    return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\r\n}\r\nconst Field = FieldImpl;\n\nlet FORM_COUNTER = 0;\r\nfunction useForm(opts) {\r\n    const formId = FORM_COUNTER++;\r\n    // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\r\n    // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\r\n    let RESET_LOCK = false;\r\n    // A lookup containing fields or field groups\r\n    const fieldsByPath = ref({});\r\n    // If the form is currently submitting\r\n    const isSubmitting = ref(false);\r\n    // The number of times the user tried to submit the form\r\n    const submitCount = ref(0);\r\n    // dictionary for field arrays to receive various signals like reset\r\n    const fieldArraysLookup = {};\r\n    // a private ref for all form values\r\n    const formValues = reactive(klona(unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {}));\r\n    // the source of errors for the form fields\r\n    const { errorBag, setErrorBag, setFieldErrorBag } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors);\r\n    // Gets the first error of each field\r\n    const errors = computed(() => {\r\n        return keysOf(errorBag.value).reduce((acc, key) => {\r\n            const bag = errorBag.value[key];\r\n            if (bag && bag.length) {\r\n                acc[key] = bag[0];\r\n            }\r\n            return acc;\r\n        }, {});\r\n    });\r\n    function getFirstFieldAtPath(path) {\r\n        const fieldOrGroup = fieldsByPath.value[path];\r\n        return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\r\n    }\r\n    function fieldExists(path) {\r\n        return !!fieldsByPath.value[path];\r\n    }\r\n    /**\r\n     * Holds a computed reference to all fields names and labels\r\n     */\r\n    const fieldNames = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((names, path) => {\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                names[path] = unref(field.label || field.name) || '';\r\n            }\r\n            return names;\r\n        }, {});\r\n    });\r\n    const fieldBailsMap = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((map, path) => {\r\n            var _a;\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\r\n            }\r\n            return map;\r\n        }, {});\r\n    });\r\n    // mutable non-reactive reference to initial errors\r\n    // we need this to process initial errors then unset them\r\n    const initialErrors = Object.assign({}, ((opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {}));\r\n    // initial form values\r\n    const { initialValues, originalInitialValues, setInitialValues } = useFormInitialValues(fieldsByPath, formValues, opts === null || opts === void 0 ? void 0 : opts.initialValues);\r\n    // form meta aggregations\r\n    const meta = useFormMeta(fieldsByPath, formValues, initialValues, errors);\r\n    const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\r\n    const formCtx = {\r\n        formId,\r\n        fieldsByPath,\r\n        values: formValues,\r\n        errorBag,\r\n        errors,\r\n        schema,\r\n        submitCount,\r\n        meta,\r\n        isSubmitting,\r\n        fieldArraysLookup,\r\n        validateSchema: unref(schema) ? validateSchema : undefined,\r\n        validate,\r\n        register: registerField,\r\n        unregister: unregisterField,\r\n        setFieldErrorBag,\r\n        validateField,\r\n        setFieldValue,\r\n        setValues,\r\n        setErrors,\r\n        setFieldError,\r\n        setFieldTouched,\r\n        setTouched,\r\n        resetForm,\r\n        handleSubmit,\r\n        stageInitialValue,\r\n        unsetInitialValue,\r\n        setFieldInitialValue,\r\n    };\r\n    function isFieldGroup(fieldOrGroup) {\r\n        return Array.isArray(fieldOrGroup);\r\n    }\r\n    function applyFieldMutation(fieldOrGroup, mutation) {\r\n        if (Array.isArray(fieldOrGroup)) {\r\n            return fieldOrGroup.forEach(mutation);\r\n        }\r\n        return mutation(fieldOrGroup);\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldError(field, message) {\r\n        setFieldErrorBag(field, message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrors(fields) {\r\n        setErrorBag(fields);\r\n    }\r\n    /**\r\n     * Sets a single field value\r\n     */\r\n    function setFieldValue(field, value, { force } = { force: false }) {\r\n        var _a;\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        const clonedValue = klona(value);\r\n        // field wasn't found, create a virtual field as a placeholder\r\n        if (!fieldInstance) {\r\n            setInPath(formValues, field, clonedValue);\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\r\n            // Multiple checkboxes, and only one of them got updated\r\n            const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\r\n            setInPath(formValues, field, newValue);\r\n            return;\r\n        }\r\n        let newValue = value;\r\n        // Single Checkbox: toggles the field value unless the field is being reset then force it\r\n        if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\r\n            newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\r\n        }\r\n        setInPath(formValues, field, newValue);\r\n    }\r\n    /**\r\n     * Sets multiple fields values\r\n     */\r\n    function setValues(fields) {\r\n        // clean up old values\r\n        keysOf(formValues).forEach(key => {\r\n            delete formValues[key];\r\n        });\r\n        // set up new values\r\n        keysOf(fields).forEach(path => {\r\n            setFieldValue(path, fields[path]);\r\n        });\r\n        // regenerate the arrays when the form values change\r\n        Object.values(fieldArraysLookup).forEach(f => f && f.reset());\r\n    }\r\n    /**\r\n     * Sets the touched meta state on a field\r\n     */\r\n    function setFieldTouched(field, isTouched) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (fieldInstance) {\r\n            applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\r\n        }\r\n    }\r\n    /**\r\n     * Sets the touched meta state on multiple fields\r\n     */\r\n    function setTouched(fields) {\r\n        keysOf(fields).forEach(field => {\r\n            setFieldTouched(field, !!fields[field]);\r\n        });\r\n    }\r\n    /**\r\n     * Resets all fields\r\n     */\r\n    function resetForm(state) {\r\n        RESET_LOCK = true;\r\n        // set initial values if provided\r\n        if (state === null || state === void 0 ? void 0 : state.values) {\r\n            setInitialValues(state.values);\r\n            setValues(state === null || state === void 0 ? void 0 : state.values);\r\n        }\r\n        else {\r\n            // clean up the initial values back to the original\r\n            setInitialValues(originalInitialValues.value);\r\n            // otherwise clean the current values\r\n            setValues(originalInitialValues.value);\r\n        }\r\n        Object.values(fieldsByPath.value).forEach(field => {\r\n            if (!field) {\r\n                return;\r\n            }\r\n            // avoid resetting the field values, because they should've been reset already.\r\n            applyFieldMutation(field, f => f.resetField());\r\n        });\r\n        if (state === null || state === void 0 ? void 0 : state.touched) {\r\n            setTouched(state.touched);\r\n        }\r\n        setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\r\n        submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\r\n        nextTick(() => {\r\n            RESET_LOCK = false;\r\n        });\r\n    }\r\n    function insertFieldAtPath(field, path) {\r\n        const rawField = markRaw(field);\r\n        const fieldPath = path;\r\n        // first field at that path\r\n        if (!fieldsByPath.value[fieldPath]) {\r\n            fieldsByPath.value[fieldPath] = rawField;\r\n            return;\r\n        }\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (fieldAtPath && !Array.isArray(fieldAtPath)) {\r\n            fieldsByPath.value[fieldPath] = [fieldAtPath];\r\n        }\r\n        // add the new array to that path\r\n        fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\r\n    }\r\n    function removeFieldFromPath(field, path) {\r\n        const fieldPath = path;\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (!fieldAtPath) {\r\n            return;\r\n        }\r\n        // same field at path\r\n        if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\r\n            delete fieldsByPath.value[fieldPath];\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldAtPath)) {\r\n            const idx = fieldAtPath.findIndex(f => f.id === field.id);\r\n            if (idx === -1) {\r\n                return;\r\n            }\r\n            fieldAtPath.splice(idx, 1);\r\n            if (fieldAtPath.length === 1) {\r\n                fieldsByPath.value[fieldPath] = fieldAtPath[0];\r\n                return;\r\n            }\r\n            if (!fieldAtPath.length) {\r\n                delete fieldsByPath.value[fieldPath];\r\n            }\r\n        }\r\n    }\r\n    function registerField(field) {\r\n        const fieldPath = unref(field.name);\r\n        insertFieldAtPath(field, fieldPath);\r\n        if (isRef(field.name)) {\r\n            // ensures when a field's name was already taken that it preserves its same value\r\n            // necessary for fields generated by loops\r\n            watch(field.name, async (newPath, oldPath) => {\r\n                // cache the value\r\n                await nextTick();\r\n                removeFieldFromPath(field, oldPath);\r\n                insertFieldAtPath(field, newPath);\r\n                // re-validate if either path had errors before\r\n                if (errors.value[oldPath] || errors.value[newPath]) {\r\n                    validateField(newPath);\r\n                }\r\n                // clean up the old path if no other field is sharing that name\r\n                // #3325\r\n                await nextTick();\r\n                if (!fieldExists(oldPath)) {\r\n                    unsetPath(formValues, oldPath);\r\n                }\r\n            });\r\n        }\r\n        // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\r\n        // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\r\n        // #3342\r\n        const initialErrorMessage = unref(field.errorMessage);\r\n        if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\r\n            validateField(fieldPath);\r\n        }\r\n        // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\r\n        delete initialErrors[fieldPath];\r\n    }\r\n    function unregisterField(field) {\r\n        const fieldName = unref(field.name);\r\n        removeFieldFromPath(field, fieldName);\r\n        nextTick(() => {\r\n            // clears a field error on unmounted\r\n            // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\r\n            // #3384\r\n            if (!fieldExists(fieldName)) {\r\n                setFieldError(fieldName, undefined);\r\n                unsetPath(formValues, fieldName);\r\n            }\r\n        });\r\n    }\r\n    async function validate(opts) {\r\n        if (formCtx.validateSchema) {\r\n            return formCtx.validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'force');\r\n        }\r\n        // No schema, each field is responsible to validate itself\r\n        const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\r\n            const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n            if (!fieldInstance) {\r\n                return Promise.resolve({ key: '', valid: true, errors: [] });\r\n            }\r\n            return fieldInstance.validate(opts).then((result) => {\r\n                return {\r\n                    key: unref(fieldInstance.name),\r\n                    valid: result.valid,\r\n                    errors: result.errors,\r\n                };\r\n            });\r\n        }));\r\n        const results = {};\r\n        const errors = {};\r\n        for (const validation of validations) {\r\n            results[validation.key] = {\r\n                valid: validation.valid,\r\n                errors: validation.errors,\r\n            };\r\n            if (validation.errors.length) {\r\n                errors[validation.key] = validation.errors[0];\r\n            }\r\n        }\r\n        return {\r\n            valid: validations.every(r => r.valid),\r\n            results,\r\n            errors,\r\n        };\r\n    }\r\n    async function validateField(field) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (!fieldInstance) {\r\n            warn$1(`field with name ${field} was not found`);\r\n            return Promise.resolve({ errors: [], valid: true });\r\n        }\r\n        if (Array.isArray(fieldInstance)) {\r\n            return fieldInstance.map(f => f.validate())[0];\r\n        }\r\n        return fieldInstance.validate();\r\n    }\r\n    function handleSubmit(fn, onValidationError) {\r\n        return function submissionHandler(e) {\r\n            if (e instanceof Event) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }\r\n            // Touch all fields\r\n            setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\r\n                acc[field] = true;\r\n                return acc;\r\n            }, {}));\r\n            isSubmitting.value = true;\r\n            submitCount.value++;\r\n            return validate()\r\n                .then(result => {\r\n                if (result.valid && typeof fn === 'function') {\r\n                    return fn(klona(formValues), {\r\n                        evt: e,\r\n                        setErrors,\r\n                        setFieldError,\r\n                        setTouched,\r\n                        setFieldTouched,\r\n                        setValues,\r\n                        setFieldValue,\r\n                        resetForm,\r\n                    });\r\n                }\r\n                if (!result.valid && typeof onValidationError === 'function') {\r\n                    onValidationError({\r\n                        values: klona(formValues),\r\n                        evt: e,\r\n                        errors: result.errors,\r\n                        results: result.results,\r\n                    });\r\n                }\r\n            })\r\n                .then(returnVal => {\r\n                isSubmitting.value = false;\r\n                return returnVal;\r\n            }, err => {\r\n                isSubmitting.value = false;\r\n                // re-throw the err so it doesn't go silent\r\n                throw err;\r\n            });\r\n        };\r\n    }\r\n    function setFieldInitialValue(path, value) {\r\n        setInPath(initialValues.value, path, klona(value));\r\n    }\r\n    function unsetInitialValue(path) {\r\n        unsetPath(initialValues.value, path);\r\n    }\r\n    /**\r\n     * Sneaky function to set initial field values\r\n     */\r\n    function stageInitialValue(path, value) {\r\n        setInPath(formValues, path, value);\r\n        setFieldInitialValue(path, value);\r\n    }\r\n    async function _validateSchema() {\r\n        const schemaValue = unref(schema);\r\n        if (!schemaValue) {\r\n            return { valid: true, results: {}, errors: {} };\r\n        }\r\n        const formResult = isYupValidator(schemaValue)\r\n            ? await validateYupSchema(schemaValue, formValues)\r\n            : await validateObjectSchema(schemaValue, formValues, {\r\n                names: fieldNames.value,\r\n                bailsMap: fieldBailsMap.value,\r\n            });\r\n        return formResult;\r\n    }\r\n    /**\r\n     * Batches validation runs in 5ms batches\r\n     */\r\n    const debouncedSchemaValidation = debounceAsync(_validateSchema, 5);\r\n    async function validateSchema(mode) {\r\n        const formResult = await debouncedSchemaValidation();\r\n        // fields by id lookup\r\n        const fieldsById = formCtx.fieldsByPath.value || {};\r\n        // errors fields names, we need it to also check if custom errors are updated\r\n        const currentErrorsPaths = keysOf(formCtx.errorBag.value);\r\n        // collect all the keys from the schema and all fields\r\n        // this ensures we have a complete keymap of all the fields\r\n        const paths = [\r\n            ...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths]),\r\n        ];\r\n        // aggregates the paths into a single result object while applying the results on the fields\r\n        return paths.reduce((validation, path) => {\r\n            const field = fieldsById[path];\r\n            const messages = (formResult.results[path] || { errors: [] }).errors;\r\n            const fieldResult = {\r\n                errors: messages,\r\n                valid: !messages.length,\r\n            };\r\n            validation.results[path] = fieldResult;\r\n            if (!fieldResult.valid) {\r\n                validation.errors[path] = fieldResult.errors[0];\r\n            }\r\n            // field not rendered\r\n            if (!field) {\r\n                setFieldError(path, messages);\r\n                return validation;\r\n            }\r\n            // always update the valid flag regardless of the mode\r\n            applyFieldMutation(field, f => (f.meta.valid = fieldResult.valid));\r\n            if (mode === 'silent') {\r\n                return validation;\r\n            }\r\n            const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\r\n            if (mode === 'validated-only' && !wasValidated) {\r\n                return validation;\r\n            }\r\n            applyFieldMutation(field, f => f.setState({ errors: fieldResult.errors }));\r\n            return validation;\r\n        }, { valid: formResult.valid, results: {}, errors: {} });\r\n    }\r\n    const submitForm = handleSubmit((_, { evt }) => {\r\n        if (isFormSubmitEvent(evt)) {\r\n            evt.target.submit();\r\n        }\r\n    });\r\n    // Trigger initial validation\r\n    onMounted(() => {\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\r\n            setErrors(opts.initialErrors);\r\n        }\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\r\n            setTouched(opts.initialTouched);\r\n        }\r\n        // if validate on mount was enabled\r\n        if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\r\n            validate();\r\n            return;\r\n        }\r\n        // otherwise run initial silent validation through schema if available\r\n        // the useField should skip their own silent validation if a yup schema is present\r\n        if (formCtx.validateSchema) {\r\n            formCtx.validateSchema('silent');\r\n        }\r\n    });\r\n    if (isRef(schema)) {\r\n        watch(schema, () => {\r\n            var _a;\r\n            (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\r\n        });\r\n    }\r\n    // Provide injections\r\n    provide(FormContextKey, formCtx);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        registerFormWithDevTools(formCtx);\r\n        watch(() => (Object.assign(Object.assign({ errors: errorBag.value }, meta.value), { values: formValues, isSubmitting: isSubmitting.value, submitCount: submitCount.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        errors,\r\n        meta,\r\n        values: formValues,\r\n        isSubmitting,\r\n        submitCount,\r\n        validate,\r\n        validateField,\r\n        handleReset: () => resetForm(),\r\n        resetForm,\r\n        handleSubmit,\r\n        submitForm,\r\n        setFieldError,\r\n        setErrors,\r\n        setFieldValue,\r\n        setValues,\r\n        setFieldTouched,\r\n        setTouched,\r\n    };\r\n}\r\n/**\r\n * Manages form meta aggregation\r\n */\r\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\r\n    const MERGE_STRATEGIES = {\r\n        touched: 'some',\r\n        pending: 'some',\r\n        valid: 'every',\r\n    };\r\n    const isDirty = computed(() => {\r\n        return !es6(currentValues, unref(initialValues));\r\n    });\r\n    function calculateFlags() {\r\n        const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\r\n        return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\r\n            const mergeMethod = MERGE_STRATEGIES[flag];\r\n            acc[flag] = fields[mergeMethod](field => field.meta[flag]);\r\n            return acc;\r\n        }, {});\r\n    }\r\n    const flags = reactive(calculateFlags());\r\n    watchEffect(() => {\r\n        const value = calculateFlags();\r\n        flags.touched = value.touched;\r\n        flags.valid = value.valid;\r\n        flags.pending = value.pending;\r\n    });\r\n    return computed(() => {\r\n        return Object.assign(Object.assign({ initialValues: unref(initialValues) }, flags), { valid: flags.valid && !keysOf(errors.value).length, dirty: isDirty.value });\r\n    });\r\n}\r\n/**\r\n * Manages the initial values prop\r\n */\r\nfunction useFormInitialValues(fields, formValues, providedValues) {\r\n    // these are the mutable initial values as the fields are mounted/unmounted\r\n    const initialValues = ref(klona(unref(providedValues)) || {});\r\n    // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\r\n    // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\r\n    // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\r\n    // so these are the values that the reset function should use\r\n    // these only change when the user explicitly chanegs the initial values or when the user resets them with new values.\r\n    const originalInitialValues = ref(klona(unref(providedValues)) || {});\r\n    function setInitialValues(values, updateFields = false) {\r\n        initialValues.value = klona(values);\r\n        originalInitialValues.value = klona(values);\r\n        if (!updateFields) {\r\n            return;\r\n        }\r\n        // update the pristine non-touched fields\r\n        // those are excluded because it's unlikely you want to change the form values using initial values\r\n        // we mostly watch them for API population or newly inserted fields\r\n        // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\r\n        keysOf(fields.value).forEach(fieldPath => {\r\n            const field = fields.value[fieldPath];\r\n            const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\r\n            if (!field || wasTouched) {\r\n                return;\r\n            }\r\n            const newValue = getFromPath(initialValues.value, fieldPath);\r\n            setInPath(formValues, fieldPath, klona(newValue));\r\n        });\r\n    }\r\n    if (isRef(providedValues)) {\r\n        watch(providedValues, value => {\r\n            setInitialValues(value, true);\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        initialValues,\r\n        originalInitialValues,\r\n        setInitialValues,\r\n    };\r\n}\r\nfunction useErrorBag(initialErrors) {\r\n    const errorBag = ref({});\r\n    function normalizeErrorItem(message) {\r\n        return Array.isArray(message) ? message : message ? [message] : [];\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldErrorBag(field, message) {\r\n        if (!message) {\r\n            delete errorBag.value[field];\r\n            return;\r\n        }\r\n        errorBag.value[field] = normalizeErrorItem(message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrorBag(fields) {\r\n        errorBag.value = keysOf(fields).reduce((acc, key) => {\r\n            const message = fields[key];\r\n            if (message) {\r\n                acc[key] = normalizeErrorItem(message);\r\n            }\r\n            return acc;\r\n        }, {});\r\n    }\r\n    if (initialErrors) {\r\n        setErrorBag(initialErrors);\r\n    }\r\n    return {\r\n        errorBag,\r\n        setErrorBag,\r\n        setFieldErrorBag,\r\n    };\r\n}\n\nconst FormImpl = defineComponent({\r\n    name: 'Form',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: 'form',\r\n        },\r\n        validationSchema: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialValues: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialErrors: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialTouched: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        onSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n        onInvalidSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const initialValues = toRef(props, 'initialValues');\r\n        const validationSchema = toRef(props, 'validationSchema');\r\n        const { errors, values, meta, isSubmitting, submitCount, validate, validateField, handleReset, resetForm, handleSubmit, submitForm, setErrors, setFieldError, setFieldValue, setValues, setFieldTouched, setTouched, } = useForm({\r\n            validationSchema: validationSchema.value ? validationSchema : undefined,\r\n            initialValues,\r\n            initialErrors: props.initialErrors,\r\n            initialTouched: props.initialTouched,\r\n            validateOnMount: props.validateOnMount,\r\n        });\r\n        const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\r\n        function handleFormReset(e) {\r\n            if (isEvent(e)) {\r\n                // Prevent default form reset behavior\r\n                e.preventDefault();\r\n            }\r\n            handleReset();\r\n            if (typeof ctx.attrs.onReset === 'function') {\r\n                ctx.attrs.onReset();\r\n            }\r\n        }\r\n        function handleScopedSlotSubmit(evt, onSubmit) {\r\n            const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\r\n            return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\r\n        }\r\n        function slotProps() {\r\n            return {\r\n                meta: meta.value,\r\n                errors: errors.value,\r\n                values: values,\r\n                isSubmitting: isSubmitting.value,\r\n                submitCount: submitCount.value,\r\n                validate,\r\n                validateField,\r\n                handleSubmit: handleScopedSlotSubmit,\r\n                handleReset,\r\n                submitForm,\r\n                setErrors,\r\n                setFieldError,\r\n                setFieldValue,\r\n                setValues,\r\n                setFieldTouched,\r\n                setTouched,\r\n                resetForm,\r\n            };\r\n        }\r\n        // expose these functions and methods as part of public API\r\n        ctx.expose({\r\n            setFieldError,\r\n            setErrors,\r\n            setFieldValue,\r\n            setValues,\r\n            setFieldTouched,\r\n            setTouched,\r\n            resetForm,\r\n            validate,\r\n            validateField,\r\n        });\r\n        return function renderForm() {\r\n            // avoid resolving the form component as itself\r\n            const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (!props.as) {\r\n                return children;\r\n            }\r\n            // Attributes to add on a native `form` tag\r\n            const formAttrs = props.as === 'form'\r\n                ? {\r\n                    // Disables native validation as vee-validate will handle it.\r\n                    novalidate: true,\r\n                }\r\n                : {};\r\n            return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), { onSubmit, onReset: handleFormReset }), children);\r\n        };\r\n    },\r\n});\r\nconst Form = FormImpl;\n\nlet FIELD_ARRAY_COUNTER = 0;\r\nfunction useFieldArray(arrayPath) {\r\n    const id = FIELD_ARRAY_COUNTER++;\r\n    const form = injectWithSelf(FormContextKey, undefined);\r\n    const fields = ref([]);\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const noOp = () => { };\r\n    const noOpApi = {\r\n        fields: readonly(fields),\r\n        remove: noOp,\r\n        push: noOp,\r\n        swap: noOp,\r\n        insert: noOp,\r\n        update: noOp,\r\n        replace: noOp,\r\n        prepend: noOp,\r\n    };\r\n    if (!form) {\r\n        warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\r\n        return noOpApi;\r\n    }\r\n    if (!unref(arrayPath)) {\r\n        warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\r\n        return noOpApi;\r\n    }\r\n    let entryCounter = 0;\r\n    function initFields() {\r\n        const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []);\r\n        fields.value = currentValues.map(createEntry);\r\n        updateEntryFlags();\r\n    }\r\n    initFields();\r\n    function updateEntryFlags() {\r\n        const fieldsLength = fields.value.length;\r\n        for (let i = 0; i < fieldsLength; i++) {\r\n            const entry = fields.value[i];\r\n            entry.isFirst = i === 0;\r\n            entry.isLast = i === fieldsLength - 1;\r\n        }\r\n    }\r\n    function createEntry(value) {\r\n        const key = entryCounter++;\r\n        const entry = {\r\n            key,\r\n            value: computed(() => {\r\n                const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []);\r\n                const idx = fields.value.findIndex(e => e.key === key);\r\n                return idx === -1 ? value : currentValues[idx];\r\n            }),\r\n            isFirst: false,\r\n            isLast: false,\r\n        };\r\n        return entry;\r\n    }\r\n    function remove(idx) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!pathValue || !Array.isArray(pathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        newValue.splice(idx, 1);\r\n        form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.splice(idx, 1);\r\n        updateEntryFlags();\r\n    }\r\n    function push(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...normalizedPathValue];\r\n        newValue.push(value);\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.push(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    function swap(indexA, indexB) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || !pathValue[indexA] || !pathValue[indexB]) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        // the old switcheroo\r\n        const temp = newValue[indexA];\r\n        newValue[indexA] = newValue[indexB];\r\n        newValue[indexB] = temp;\r\n        const tempEntry = newFields[indexA];\r\n        newFields[indexA] = newFields[indexB];\r\n        newFields[indexB] = tempEntry;\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function insert(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length < idx) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        newValue.splice(idx, 0, value);\r\n        newFields.splice(idx, 0, createEntry(value));\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function replace(arr) {\r\n        const pathName = unref(arrayPath);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\r\n        initFields();\r\n    }\r\n    function update(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\r\n            return;\r\n        }\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\r\n    }\r\n    function prepend(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [value, ...normalizedPathValue];\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.unshift(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    form.fieldArraysLookup[id] = {\r\n        reset: initFields,\r\n    };\r\n    onBeforeUnmount(() => {\r\n        delete form.fieldArraysLookup[id];\r\n    });\r\n    return {\r\n        fields: readonly(fields),\r\n        remove,\r\n        push,\r\n        swap,\r\n        insert,\r\n        update,\r\n        replace,\r\n        prepend,\r\n    };\r\n}\n\nconst FieldArrayImpl = defineComponent({\r\n    name: 'FieldArray',\r\n    inheritAttrs: false,\r\n    props: {\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const { push, remove, swap, insert, replace, update, prepend, fields } = useFieldArray(toRef(props, 'name'));\r\n        function slotProps() {\r\n            return {\r\n                fields: fields.value,\r\n                push,\r\n                remove,\r\n                swap,\r\n                insert,\r\n                update,\r\n                replace,\r\n                prepend,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            push,\r\n            remove,\r\n            swap,\r\n            insert,\r\n            update,\r\n            replace,\r\n            prepend,\r\n        });\r\n        return () => {\r\n            const children = normalizeChildren(undefined, ctx, slotProps);\r\n            return children;\r\n        };\r\n    },\r\n});\r\nconst FieldArray = FieldArrayImpl;\n\nconst ErrorMessageImpl = defineComponent({\r\n    name: 'ErrorMessage',\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const form = inject(FormContextKey, undefined);\r\n        const message = computed(() => {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                message: message.value,\r\n            };\r\n        }\r\n        return () => {\r\n            // Renders nothing if there are no messages\r\n            if (!message.value) {\r\n                return undefined;\r\n            }\r\n            const tag = (props.as ? resolveDynamicComponent(props.as) : props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            const attrs = Object.assign({ role: 'alert' }, ctx.attrs);\r\n            // If no tag was specified and there are children\r\n            // render the slot as is without wrapping it\r\n            if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\r\n                return children;\r\n            }\r\n            // If no children in slot\r\n            // render whatever specified and fallback to a <span> with the message in it's contents\r\n            if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\r\n                return h(tag || 'span', attrs, message.value);\r\n            }\r\n            return h(tag, attrs, children);\r\n        };\r\n    },\r\n});\r\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function resetForm(state) {\r\n        if (!form) {\r\n            return;\r\n        }\r\n        return form.resetForm(state);\r\n    };\r\n}\n\n/**\r\n * If a field is dirty or not\r\n */\r\nfunction useIsFieldDirty(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.dirty;\r\n    });\r\n}\n\n/**\r\n * If a field is touched or not\r\n */\r\nfunction useIsFieldTouched(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.touched;\r\n    });\r\n}\n\n/**\r\n * If a field is validated and is valid\r\n */\r\nfunction useIsFieldValid(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.valid;\r\n    });\r\n}\n\n/**\r\n * If the form is submitting or not\r\n */\r\nfunction useIsSubmitting() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validates a single field\r\n */\r\nfunction useValidateField(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return function validateField() {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return Promise.resolve({\r\n                errors: [],\r\n                valid: true,\r\n            });\r\n        }\r\n        return field.validate();\r\n    };\r\n}\n\n/**\r\n * If the form is dirty or not\r\n */\r\nfunction useIsFormDirty() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form is touched or not\r\n */\r\nfunction useIsFormTouched() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form has been validated and is valid\r\n */\r\nfunction useIsFormValid() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validate multiple fields\r\n */\r\nfunction useValidateForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function validateField() {\r\n        if (!form) {\r\n            return Promise.resolve({ results: {}, errors: {}, valid: true });\r\n        }\r\n        return form.validate();\r\n    };\r\n}\n\n/**\r\n * The number of form's submission count\r\n */\r\nfunction useSubmitCount() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\r\n    });\r\n}\n\n/**\r\n * Gives access to a field's current value\r\n */\r\nfunction useFieldValue(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\r\n        }\r\n        return unref(field === null || field === void 0 ? void 0 : field.value);\r\n    });\r\n}\n\n/**\r\n * Gives access to a form's values\r\n */\r\nfunction useFormValues() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return (form === null || form === void 0 ? void 0 : form.values) || {};\r\n    });\r\n}\n\n/**\r\n * Gives access to all form errors\r\n */\r\nfunction useFormErrors() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return ((form === null || form === void 0 ? void 0 : form.errors.value) || {});\r\n    });\r\n}\n\n/**\r\n * Gives access to a single field error\r\n */\r\nfunction useFieldError(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\r\n        }\r\n        return field === null || field === void 0 ? void 0 : field.errorMessage.value;\r\n    });\r\n}\n\nfunction useSubmitForm(cb) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    const onSubmit = form ? form.handleSubmit(cb) : undefined;\r\n    return function submitForm(e) {\r\n        if (!onSubmit) {\r\n            return;\r\n        }\r\n        return onSubmit(e);\r\n    };\r\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate };\n"]},"metadata":{},"sourceType":"module"}