{"ast":null,"code":"const express = require('express');\n\nconst cors = require('cors');\n\nconst bodyParser = require('body-parser');\n\nconst fs = require('fs');\n\nconst app = express();\nconst port = process.env.PORT || 3000; // Middleware\n\napp.use(cors());\napp.use(bodyParser.json()); // Leer archivos JSON\n\nlet categories = [];\nlet products = [];\nfs.readFile('categories.json', 'utf8', (err, data) => {\n  if (err) throw err;\n  categories = JSON.parse(data);\n});\nfs.readFile('products.json', 'utf8', (err, data) => {\n  if (err) throw err;\n  products = JSON.parse(data);\n}); // Rutas de la API\n\napp.get('/categories/getAll', (req, res) => {\n  res.json({\n    categories\n  });\n});\napp.get('/categories/products/:categoryId', (req, res) => {\n  const categoryId = parseInt(req.params.categoryId);\n  const categoryProducts = products.filter(product => product.categoryId === categoryId);\n  res.json({\n    products: categoryProducts\n  });\n});\napp.get('/products/getAll', (req, res) => {\n  res.json({\n    products\n  });\n});\napp.get('/products/getProduct/:id', (req, res) => {\n  const productId = parseInt(req.params.id);\n  const product = products.find(p => p.id === productId);\n\n  if (product) {\n    res.json({\n      product\n    });\n  } else {\n    res.status(404).send({\n      message: 'Product not found'\n    });\n  }\n}); // Ruta para buscar productos\n\napp.get('/products/search', (req, res) => {\n  const query = req.query.query.toLowerCase();\n  const filteredProducts = products.filter(product => product.product_name.toLowerCase().includes(query));\n  res.json({\n    products: filteredProducts\n  });\n}); // Iniciar servidor\n\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});","map":{"version":3,"sources":["C:/Users/JELOSKA ISABEL/Documents/wild-souls/Wild-Souls/src/config/site.config.js"],"names":["express","require","cors","bodyParser","fs","app","port","process","env","PORT","use","json","categories","products","readFile","err","data","JSON","parse","get","req","res","categoryId","parseInt","params","categoryProducts","filter","product","productId","id","find","p","status","send","message","query","toLowerCase","filteredProducts","product_name","includes","listen","console","log"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst bodyParser = require('body-parser');\r\nconst fs = require('fs');\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// Leer archivos JSON\r\nlet categories = [];\r\nlet products = [];\r\n\r\nfs.readFile('categories.json', 'utf8', (err, data) => {\r\n  if (err) throw err;\r\n  categories = JSON.parse(data);\r\n});\r\n\r\nfs.readFile('products.json', 'utf8', (err, data) => {\r\n  if (err) throw err;\r\n  products = JSON.parse(data);\r\n});\r\n\r\n// Rutas de la API\r\napp.get('/categories/getAll', (req, res) => {\r\n  res.json({ categories });\r\n});\r\n\r\napp.get('/categories/products/:categoryId', (req, res) => {\r\n  const categoryId = parseInt(req.params.categoryId);\r\n  const categoryProducts = products.filter(product => product.categoryId === categoryId);\r\n  res.json({ products: categoryProducts });\r\n});\r\n\r\napp.get('/products/getAll', (req, res) => {\r\n  res.json({ products });\r\n});\r\n\r\napp.get('/products/getProduct/:id', (req, res) => {\r\n  const productId = parseInt(req.params.id);\r\n  const product = products.find(p => p.id === productId);\r\n  if (product) {\r\n    res.json({ product });\r\n  } else {\r\n    res.status(404).send({ message: 'Product not found' });\r\n  }\r\n});\r\n\r\n// Ruta para buscar productos\r\napp.get('/products/search', (req, res) => {\r\n  const query = req.query.query.toLowerCase();\r\n  const filteredProducts = products.filter(product =>\r\n    product.product_name.toLowerCase().includes(query)\r\n  );\r\n  res.json({ products: filteredProducts });\r\n});\r\n\r\n// Iniciar servidor\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n"]},"metadata":{},"sourceType":"script"}